package course4

import scala.collection.mutable.ListBuffer
import scala.util.Try

object ProteomicsRunner extends App {
  import Proteomics._
  val spectralVector =  "5 -4 7 10 -20 6 24 -5 -13 -13 4 4 -15 -8 -10 -10 2 -8 25 26 3 -8 -12 19 16 -1 18 8 -15 -15 -3 -14 -3 22 14 -2 3 10 13 -5 21 -12 28 -13 -13 1 -8 6 -14 13 -18 -18 -14 -12 -7 7 -2 16 11 14 30 23 -15 27 12 -16 25 -17 22 9 5 9 15 25 -9 18 21 -15 12 1 -18 -7 -18 -15 -2 23 18 -11 5 29 -6 -20 19 20 21 -7 20 1 23 -2 23 13 -4 0 -9 2 -11 -3 23 -15 -5 12 -16 25 -16 -5 29 24 -5 19 0 -6 1 8 -1 -12 -16 9 26 -11 -12 11 14 22 9 16 4 -8 -7 -3 -12 -14 -1 10 -2 15 23 -9 10 -8 18 2 -17 9 -1 -1 21 -17 -8 -15 -12 -11 -18 18 20 13 17 17 -5 20 0 4 22 -18 8 25 17 27 6 17 -11 -18 30 -18 26 3 4 -9 5 25 16 23 -19 9 -10 27 15 26 14 1 29 -11 13 -11 26 29 28 11 24 -15 26 -18 19 27 -11 30 23 28 1 26 -14 25 -17 14 26 -14 26 30 -13 -10 -13 -18 16 -2 8 16 3 30 -5 3 -10 12 5 7 -20 15 27 23 11 16 -2 -1 -2 7 12 -5 1 1 29 18 13 -14 2 16 10 -3 -3 21 25 30 23 25 16 15 14 0 18 -1 -8 13 9 -13 5 28 -5 8 -9 5 4 -12 -3 -18 0 -6 6 0 13 4 -7 29 -8 -4 -2 4 18 7 7 27 28 -11 -4 -3 -14 -1 3 28 15 -2 23 -9 -12 23 20 8 24 -20 7 -8 -10 18 24 15 -6 -6 -8 -19 -8 -9 13 10 30 -8 -7 -19 6 21 -8 -17 -3 5 23 -19 8 -2 27 13 10 -11 -15 26 -5 -7 -18 -2 4 -2 -19 -6 30 -16 -4 1 -19 13 -11 30 -6 -18 -19 18 18 -3 16 14 -10 12 19 -7 29 -17 -5 0 -14 -8 16 28 22 0 24 26 4 -7 5 25 -1 21 19 -18 -18 -18 22 -20 3 1 -1 -17 6 -18 19 29 -3 20 27 -16 12 21 13 -6 1 25 -14 9 -14 12 -16 -13 20 16 8 16 -14 27 18 2 30 20 19 -2 -5 0 -2 26 -7 17 5 18 13 3 24 30 10 27 3 -15 -12 -7 1 -18 20 25 -7 -3 -7 22 9 12 -13 -7 2 -15 29 -5 23 14 27 -12 18 3 21 10 -3 15 -11 2 16 -16 24 20 11 25 -6 24 -15 9 23 -1 -9 21 -19 -10 -18 18 -2 -5 -6 -16 -5 0 -18 19 -8 -13 24 2 4 -11 1 27 -8 -18 1 -2 25 22 12 9 30 9 28 18 30 15 -14 14 -4 23 28 10 27 17 14 -9 2 -20 21 -9 18 -4 6 14 -11 16 24 27 -3 -13 5 11 7 21 -16 10 -20 15 23 12 29 2 23 -4 -11 -4 -3 26 3 24 22 19 12 6 -5 7 1 18 2 -12 -12 -14 -9 -4 8 28 23 14 -13 3 -1 2 -18 5 26 25 17 22 -1 25 -15 -5 -19 -11 -16 -7 -11 -14 -19 18 10 -20 -6 -13 27 30 -1 -13 16 -11 28 -14 14 26 -9 -4 24 25 23 -16 -2 30 4 30 -5 5 -18 16 8 28 13 20 -2 -14 -20 8 5 27 15 10 -6 20 29 12 -15 -7 -20 26 13 24 -10 -4 27 9 9 -11 6 28 -7 27 10 -15 3 -1 -2 0 30 12 -3 26 13 23 -20 4 9 -18 30 14 23 4 24 10 -6 15 16 -17 11 -1 -19 30 10 30 -13 -14 0 1 16 20 16 27 29 -14 26 -12 27 16 3 -19 -10 -19 7 24 -12 29 -9 5 -8 -11 22 30 -6 -1 -7 27 22 5 -10 -9 0 29 9 0 22 17 19 14 1 13 1 19 -2 26 -1 -12 -19 8 3 21 29 -7 -15 14 18 -14 -9 19 -11 -9 -17 5 4 17 -11 7 -18 28 20 3 29 -15 -6 26 19 -16 11 15 30 0 3 5 9 15 -6 -8 1 22 5 24 1 27 19 14 8 -12 21 28 -18 15 23 1 -9 6 -15 5 27 2 -8 -3 21 -12 -8 -6 9 24 25 14 -12 0 -17 -6 -9 23 -3 -13 22 -20 -13 14 9 27 -5 22 -9 -8 -11 20 8 -8 2 -8 7 -6 -16 -11 -5 6 26 13 2 -12 27 -6 10 -10 23 -2 -14 -16 -13 30 24 -18 -13 12 3 -9 -2 14 -18 20 -18 -9 9 24 24 8 10 -8 -6 2 -16 13 1 12 -17 -20 30 25 16 13 -4 30 -10 24 3 29 -8 16 -19 -16 -17 10 -10 -8 19 3 -14 18 -16 3 18 2 -4 24 17 12 21 10 19 11 30 21 -10 6 9 2 -19 -16 9 22 18 -4 -12 -2 -4 28 1 -20 -20 -20 -7 0 -20 -8 21 -4 -14 28 -14 -10 -16 -9 -11 2 -8 12 -19 8 28 11 -13 23 22 -11 16 7 14 -7 1 -1 26 -16 24 -9 14 -5 22 -16 -16 -10 23 -18 10 23 -8 -10 -13 -12 7 -19 23 28 -20 1 -14 28 11 10 17 7 11 6 -15 10 1 14 27 -19 -4 7 0 30 -6 19 -19 -10 1 -18 -9 -16 -11 20 6 3 -20 -10 -16 23 -20 14 -15 30 -18 -9 -3 20 -1 -13 -10 28 8 -18 11 28 -13 25 0 -3 0 -12 -20 8 12 20 -15 -16 16 27 22 -7 -6 -18 5 13 -6 11 9 13 18 -4 28 -4 18 17 0 -16 15 12 28 -11 30 -9 -15 0 -4 -18 0 17 -16 -12 9 3 6 20 6 -18 -14 -18 27 -5 -6 26 25 0 -9 25 7 19 -20 -20 -17 16 -4 -12 18 10 -14 -2 29 -9 19 22 30 0 -12 18 4 0 -15 -10 25 22 14 23 23 9 23 -17 -8 29 28 -8 22 5 3 -17 26 -19 -12 -4 -5 14 -9 10 -18 30 24 -17 -7 1 -11 -11 2 -16 18 10 -2 23 -14 19 14 0 -4 -11 16 -15 27 17 11 -4 1 17 21 -6 3 25 0 19 11 25 17 2 -4 22 30 20 3 -12 10 -11 -11 8 -14 -6 23 -11 19 -16 25 6 4 11 14 -12 -20 -9 10 20 15 -12 -10 30 30 10 0 29 27 -4 19 10 -10 15 -14 17 25 -9 10 26 -4 16 -17 4 21 -13 3 22 30 16 15 -18 16 -8 -13 24 17 8 -7 15 7 -2 -9 11 -8 30 -3 8 7 26 -16 -18 -18 -10 29 11 -13 28 0 20 10 5 25 -10 20 25 -15 -13 -16 12 -3 10 5 18 20 29 -8 -19 -11 27 -11 11 -15 -16 -7 0 -11 -16 -2 -6 30 -8 0 -6 -18 16 3 18 20 -13 -4 28 -17 -18 -9 -20 -19 6 8 9 -13 -11 -9 1 20 26 14 3 30 -9 -17 0 0 11 -5 9 5 22 30 -5 26 9 23 19 29 -15 20 30 -10 -16 26 2 -12 23 23 3 24 20 -2 4 7 -18 -10 20 -12 -18 26 -11 -12 7 -15 0 0 14 -11 -15 8 -14 2 24 -14 15 14 16 -10 -6 27 2 -3 10 22 -4 30 17 15 27 29 6 11 16 18 -1 -9 27 10 12 -6 15 9 -8 2 8 -13 29 20 0 21 -8 2 -12 -3 8 -12 24 -15 -11 18 14 6 -14 -8 30 -17 26 3 10 -9 20 27 13 10 -14 23 29 -11 15 -18 -13 -13 22 -13 -12 10 10 18 14 13 -4 18 -7 4 29 14 3 25 23 18 16 -12 17 -5 29 11 -15 -10 11 -10 27 -3 14 16 11 14 3 -15 14 22 0 -12 5 -20 26 -14 -7 -12 -20 -7 12 -17 -8 15 5 22 17 -19 -17 27 2 -4 10 -18 16 11 30 -19 -12 25 10 1 -20 24 -12 -4 21 3 -10 27 19 -14 29 13 27 -18 7 6 6 12 29 6 -15 -4 -9 8 -5 9 17 -14 -8 -13 30 19 27 29 19 28 30 7 9 27 -5 6 16 -9 -19 -6 2 1 18 -11 2 -18 21 -19 13 25 26 26 24 -4 11 -15 -19 30 9 15 15 -8 26 15 28 12 22 -19 -15 20 -9 28 -1 -15 -3 -15 -4 13 -17 -7 11 -8 21 -2 21 5 4 -13 16 8 30 8 22 12 -10 19 -17 29 -13 -3 13 -16 -14 7 23 27 1 1 11 13 -17 -10 -17 -14 2 5 4 16 23 -15 -1 -15 -6 -20 -2 -16 -12 -6 15 27 -20 9 24 2 25 -2 27 18 -10 6 1 18 16 2 -6 -15 7 11 -16 -12 -2 6 1 30 22 -13 19 14 22 -2 -16 3 -16 -7 -3 13 27 3 -2 18 22 -5 -15 27 24 -5 16 13 14 -1 9 -18 7 0"
      .split(" ").map(_.toInt).toList
  val proteome = "QMSDFWAMSHPGQKCNCAFERPPQCCELVLYTREYMAWTLPDMDPDDMLLASNGDDKRYLQGSSLYFCLHWVMDGTGTTYHPQAMWDTLLEMDKHMNFHLGDYRLEQFYQRQWCRKRMQIAHDDKNRTIWKWKGDNVCGELIPNNNIWSVHMDDDCVLFMRDAKKKAEWDDYWYHKVDTLQGFMCIESCWLEWLWSKMHIKRYMQVLSQLRMSQHQYHGCITMMEWMSAFWALGHACPFSTVIIAISEEGFIQFLQQILYIRMPFRWTTVFWQNQVVRGIECMTAGIHLAMASNGMSLWYHDQNDYMFLKTNQKRRLQCQYEWNHSQEWMGQMIICLAAFADNMPLRADDQKYTINRKHFLVSKPTIWCEKEILPGACQQDRYYRESMSQHNTKLHQGCHKSIILKSHSIWWDMWTHPSDWEPEHVDGTFGTSLGWQCQHWMKTAFPYHKQYYACSSQRQYPEHSPHQESTMPPCKTANQCYFCDRLYCADCTTVYFNITMENRRKECTPRFYRAREPMSDQPLQFWNWQSWRCHYPHHSSQRINSILTLFNDKQPQRYHNWFWIYFNQKFYVSKWWNQVSQCDTDYWERMLEQEMPRSVREYQLDAAEHPKWLDNMTRFPNDSCIGEDVMNCYVCFVYPTIELYQLCMFDNAMKPLKGALKWDWDWFYAKYLTNYAEHEGVKWVCSIPGNMGFSFEVKTGWSEHDTPNSRMPCLMTRIRADGPFVEHFNNRDCLCRTKGTGFCDSLTADIPAHYHSPYRKDSWIEKRYNCVVANTRNSQLRICEEMQEQDHVLFMDSDLIKHSMCYNAKDRLSHRNFMTFWGCLPKYITYFNGKWCTEPWSNVQHSASIFMHTFLGQERRAQTRCHRSSEFRNHEAILSSKAEPLGIIDMVKVIWYVCTITSFCRFVWMINRWEWGHKWPQPHKATAMNRFLLPMLCWYYKHASSMEYEFMCAMLIDRSPRAAVMGPWVMNKLSYTDFETRNKPCMVSPIPMDHWLKRQDSQPYPDGGRKQTYGFHVMYWPDAARYYNEERFCEWMTDGVCGRRAPKSRHMFGHEFWISQEWCGNKQPRLNTVGQEPAKAGHQGLQRGEMEYDTPVGVSCQPWFICLHLQTAIVDCFAFMAVIHFRMVHDKRVPIFHNWLSRIRAFSAYYIETNIHFRCERRMWIPDEIGDHRKRKWGSALTSFRYYNWMCSQQICQWPWVRTPHMNGVRCIYGQREQYKSDNPGNYCIRRDDQHILKMQIHQWYIAAIMFSKNDTNVFNAGLREQPLAPGKICMMRESMTMPTNHSSMHGKSMMIEMYYFHTENLWGTHLHEPLRVKDSDDPFENPEDKMCYDMIGEYQWSCICRKVNTGTTGSANLVGCVTPDRINAIIYVEGRSSPWCKDSMIWQHTNLLKAISWMAKRYMLQPYNRTDAMSGIIERVSQNPTNDCTWLQNAVCTAIYIIKFVLADHVMKAYTQEVEGQYVVFTYQACGWHKNKNRKHEEVDRDAGDDGVWPAAAFSKMMAGSGRLWCNGCRNMRHNDCRMMIDYDQPIVWKAEPFENFYQNNEFEIFGAIVRLCQTEQWIEITRHTHCSWRGNPTPCAPWQCYGSHEWCPMQMKRGQGNWMVKIIIWEEQWCNKVRWITPCTDRLGGRPAKQWRHYVKIWTEWCHPQDVNEYTGRNEHYWMDTFNNKIKVNKQKVPENMCIGACRGGTWATVYIGQVDACDIVKFWTIWGNIMHPSCQKEMTENYVAANEDTCPDTMGGETWEGMKNVRQKLDEPWTCISYPDWKRILARYGHKNKMMWVCNHQDLLHLNGHIMITWRMILVEENTRVCRLEAPRPAWAWYLYYMDWQPIRQKTRNTGGMGDEHTFIPQPVKQLSGTEIFDSFVICHSLRRDAMRFTFFQAPIAFNNYHSNFLVLATYPNRELNFWTEWLVKLEGWFCVSRCMSPYFQACGPDHNTKWYDNGQNKNCFSNRSFCLPWVTRERQGDVGLKDVDSCCAYCMMLGLCYIYSADQDTHECIYIRLHQFRDMYNYTMSAGCSRKQAWETAKCGHFIRDAMTTRCNFMFAPDADPMMWMGPKVEGIYWFAWNPHCQRCTMGAFWIHPNFMQPWYQCIHMLKRVIYYHYNPFMRQDQLATVIKMHHAPKWWIDQSTLAVVNGSYNEYWYWNFNYSEYEEDFNNGVSFRNVAYCILNGEHGGRWMPNYQCIMQAGCRCWAHAMLDWPQGLCAIGQLIVESLCQMHWIEYMHQGMHSHKTEKTAMTRGWSNGNCKQKCRFCLHMPSSSTHMPHNRVTMVGSPTEMHWMNQKAVQATQRYYRHVFYAVAHAEFQVLYGVINWCMPLCGMNTKVNGNMFDARLCFQVMIQGAFMGCTEVKVIRHSEEGKSRWMIGESQRNTKDPHTLFLEETKENKCFSRNSNIIDQNKPAGAHVCEGNKMMTWYWSWIMYAHTCLMYQAQHNPWGLVVWFCYFGEQEHTTTQYHFAGEPNVDSHTRSTNFEVPCIITIWETEEWNEDPRYCEEENYEPFCRVWLDTKIDIIEMHVEWRDGYWLMEYHFDGPNQYNTEQQAWSLQAPQNPGHKQMHMVVWSYDEGDCPGYTVAWFHGGEWPGWSIGKHDDLIRGYYSRAHKAEDMDNWHMQQHVTRWMYHVVWMWNNPQMWEASLNDSPCVAYAFYAGGRCLGSAFRINAHGIQQMYRRQHAWYPLSQAHGINRFDTNMWGQDMLTCFNVFKPFDVWNEFRWDFDDPHNSVLGGWFGRKEIATYQHPSDDIFDASSEFSRKSSETSTTNANVQSEYEKMSMIQAIAGWTITAQWVRINIFFWPMHLIVQQYTHWNYFLEYSQAMLWSVEDLCAMFVKVLGRDMWEVSGAHLMIASVLNMGGEAQACYEEWKQDTPRTMKLNQLSSWMEGKLVVNLEWKFLSFCLVPFDKPHVAFSHQCQQCFQHGNYIWDKCFTLGHDGMGHEQAKDRANEYSHFNGGATEGKAVSLHCECSQLPICYQKLAYTALDGWNRLTHKWQFRREPRRQYEKQQGGAMTGGECEEQYNLFCNLYKRHPKWWARNSTPCPCLDEHRNEPKPTFLYYMGKCKVETTMQTANGTTTMAFGEELIAEIKTLRCKIIQWHNTWCFAWWMSLCVCGKTGMDQQSQHRFWIRTQCDYLYYMQKMKIIPENDNALCAGPDDGEFMPNMNWSMYVWLNDAIPMTPKNYKVYRAAHMMLRWKAWDTPVREWVSNWVMNFIQVKVSFSSVHWWFTHSHFAVTQSCNPATRCKSQCICGILWQNWFCGDNLFQQIQYTTACNHFHQGLWVLRQDGAPSVTDCPLFNYMPNQQAQSMNEKRRESHELMACQYHPYKAFVDYSWWMFALCYSQEPTPELNVCETKTWSHIDWDRLKLHIGKDVNNFATMQHCFKNHAEWNRPQHHQFHTTPATRVFRKMFILASETGDWTEIPEGECAYLDWQWKIGCFNASQPVITDKWNPMDPIESVDKINPGVGSFQDQYVKGGIKYQWVILVCVFLLHAAWPKLAGQPSDYQNERTSSAEKYIKAQVRNMLYNKHDWMRNQNHTDTNDRSFWMPKCNYSCEFMYPRSNNEEDHVPDAHFVHNDKSIQLVVMKIWTVSHVKTMVFYQSDKHYFYLPYSIDPKAKWIEAFGIFEDPSWVNDEKQYYMQQTFDRMSYAAEGTWLMHWKYWNQKFDCIKKIMRWGQHNNWKSCFHIPLKVGSTWGRFHQWPWEAILMEFDGVSTYWHMNSKGNDRCRVNEPPDKHYKHMDYRRMLNYCFAVDAENSKCRILTVINVKWTTEHYSDVMFNTYGELMWCVNIMNPEYWGPIGTRWMDAHKAMDRCYCTESVDVIHPHWRDEKCRRGSQNMNINWLKGWRKSMYKVRHALDNTQHQMWHEQHFCDCFKVGVGISRKEWTHPMIAGAWGEGYFPSCIVCRDMLQHGERCRTMRKFENDDCPPDPFCNNLDVAHFPWHLFMKSYVESRWCDKAYGNCNEINWMNPRSRHNKVLKFQYAYSRTTMPIPFMPRNTKQGWDTIFAAYPKETMSVNEAYKCVDQYTWAIAGDNWAGLYQAAKHDIEPAEVQNSCPHTWIVCYSAKGPHAYFNEKELRAHSYNCLYDIIRRYSKHFAAGGGPFKDLAAKDWWAAIYYCRVADTEEAYGWDDTLTGSKGWLGSGRHGFINSVMFDCLLPRCIWLFAKCRGDDAYYVWIRQYDYMCYTECQKDCRMIGPEIKQGPVFFIGPTIQKMNYSTICPKTMYWSEQDMHARTEHYNYECSWNYMEKINHSGLFWSLCFCNVNYDWRLQNVHSCTTVAMQLDMEKFQTHLPHWDTYQADIMHKRKYWWHALYCEWFSYMTHCHPDCGLCMDAATEHFEKKMVCCFSIVWKLSYLPFRWHKGWPFGRHPVKTWAEESAAQLEVMICMKEDFVPEPLYIWNIMLDAFEDGYYILAAWDRMANKDEQCNLCDGPPNDASYDYDFKYKRIFFVALGIAKFDTEVNCYVSQVEQWQMKNTERTTSIPRFWPPRSWGDVRIDSLTGVHSWLTDQTHNKAHKTHRRGSLTCIYTYGEDALIWACLTGDNGWLWRNRNPAMVKRQDCHGWAVEPGYHVVCHQNVANQMFMWIVTSWCRFGHIMWVVLWWFTGDFCLMFDFADWASGHTKCSWFEGTHWWCERGAHQMMNPIRAPNLGCMRDSLWKTYYTIPRTSAEWGCLMGLARQNEMAPESYDEAYDNEWKILPIVWANIWFSYSAAIHRCVKKEWFDSMMLENFRFKRGKVWMNWMQLWWMNPYEAHRDSLYCGDLDEYEARQWSQGCSDFADMSCKAHIIVHTEIYVFKVSPDTACKWSFNDQRPHGYILHENLHEYHTCTKHFPNMSFVVKAHQTSDGVALMWAGYGAMWGFHNQFQIPRVQSTKVRNMVVASWWELNEPFWMHNMIAGMSRFRQMWDMQIGDHSYRTWPWFFHCQVIHQAMVEKGYLRGAHPEYSHDKNMWETFRDFVDMFMRGIQDFYMKQRMPKNSFELAPQSCLLWVGRKVHFGFTPWKTV"
  println( peptideIdentification(spectralVector, proteome)(integer_mass_table_revers) )
}

object Proteomics {

  import scala.util.control.Breaks._

  def  peptideIdentification(spectralVector: List[Int], proteome : String)(integer_mass : Map[String, Int]): String = {
    val n = proteome.length
    val l = spectralVector.length
    val results = ListBuffer[(String, Int)]()
    for(i <- 0 to n - 1){
      breakable {
        for (j <- i to n - 1) {
          val candidate = proteome.substring(i, j + 1)
          val candidateScore = candidate.map(c => integer_mass(c.toString)).sum
          if (candidateScore > l) break()
          else if (candidateScore <= l){
            val prefixesMasses = ( getPrefixes(candidate) :+ candidate )
                    .map(r => r.map(c => integer_mass(c.toString) ).sum )
            val currScore = prefixesMasses.map(m => spectralVector(m - 1) ).sum
            results.append( (candidate, currScore) )
          }
        }
      }
    }
    results.maxBy(_._2)._1
  }

  val integer_mass_table: Map[Int, String] = {
    val data = scala.io.Source
      .fromFile("src/main/resources/integer_mass_table.txt")
      .getLines().toList.map(_.split(" "))
    data.map(_ (1).toInt).zip(data.map(_ (0))).toMap
  }

  val integer_mass_table_revers: Map[String, Int] = {
    val data = scala.io.Source
      .fromFile("src/main/resources/integer_mass_table.txt")
      .getLines().toList.map(_.split(" "))

    data.map(r => r(0)).zip(data.map(r => r(1).toInt)).toMap
  }

  def graphSpectrum(in: List[Int]): List[(Int, Int)] = {
    val data = for {
      x <- 0 :: in
      y <- 0 :: in
      z = Math.abs(x - y)
      if integer_mass_table.contains(z)
    } yield {
      if (x < y) (s"$x->$y", s"${integer_mass_table(z)}")
      else (s"$y->$x", s"${integer_mass_table(z)}")
    }

    data.toMap
      .map(r => r._1.split("->"))
      .map(r => r.map(_.toInt))
      .toList.map(r => (r(0), r(1)))
  }

  def getPrefixes(peptide: String): List[String] = {
    for {
      i <- 1 to peptide.length - 1
      p = peptide.substring(0, i)
    } yield p
  }.toList

  def getSuffixes(peptide: String) : List[String] = {
    for {
      i <- 0 to peptide.length - 2
      p = peptide.substring(peptide.length - 1 - i, peptide.length)
    } yield p
  }.toList

  def peptideToSpectrum(peptide: String) : List[Int] = {
    val prefixAndSuffix = getPrefixes(peptide) ++ getSuffixes(peptide)
    (prefixAndSuffix :+ peptide).map(row => row.map(c => integer_mass_table_revers(c.toString) ).sum ).sorted
  }

  def decodingIdealSpectrum(spectrum: List[Int]) : String = {
    val graph = graphSpectrum(spectrum)

    def getPaths(s: Int, acc: List[Int]) : List[List[Int]] = graph.filter(e => e._1 == s) match {
      case h::tail => getPaths(h._2, h._1 :: acc)  ++ tail.map(q => getPaths(q._2, q._1 ::acc)).flatten
      case Nil => List(s :: acc)
    }

    val result = getPaths(spectrum.head, List(0) ).map(r => r.reverse)
    val peptides = result.map(row => {
      (0 to row.length - 2).map(i => integer_mass_table(row(i + 1) - row(i)) )
    }).map(_.mkString(""))

    //peptides.foreach(r => println(r.mkString("") ) )
    peptides.find(peptide => peptideToSpectrum( peptide) == spectrum) match {
      case Some(p) => {
        println(p)
        p
      }
      case None => throw new Error("No peptide found for ideal spectrum")
    }

  }

  def getPeptideVector(peptide: String)(integer_mass: Map[String, Int] ): String = {
    val prefixes = getPrefixes(peptide) :+ peptide

    val positions = prefixes.map(r => {
      r.map(c => integer_mass(c.toString)).sum
    })

    val z  = Array.fill(positions.max)(0)
    positions.map(i => z(i - 1) = 1  )
    z.mkString(" ")
  }

  def peptideVectorToPeptide(vector: String)(integer_mass_revers: Map[Int, String] ) : String = {
    val positions = vector.split(" ").zipWithIndex.map(p => if (p._1.equals("1")) p._2 + 1 else 0 ).filter(e => e > 0)
    val result = for {
      i <- 1 to positions.length - 1
      x = positions(i) - positions(i - 1)
    } yield x
    val data = positions.head :: result.toList
    data.map(e => integer_mass_revers(e)).mkString("")
  }

}
