package course6

object Suffix3Runner extends App {
  import SuffixTree3._

  val in = "GCAGAGGCGAGCGCCACAGCCTCGGAGCTAGGACGCTAATAGTAACGCTCGGTAGGCGAGGCCTACCCGTGGCGTTCTCGGCCTCCCTTGGCGTTAAAAAGCAAAACTACTCTAGGATGGGAAGAACCTCAGTCAGTTAGGTCAACGGCTGATGTACTATACTTGCCAGCTCTACTAAGCCCAAATAGGCAGTCCATGTCCGCCGCCATAACTCCCGAGAACGGCAGCGAATTTGTTCCAATATAGGCTGTGCAAGGCTTTGTCGAGCCTTTCTGGAGATAATACTGATGATTCCGTCTGAGCTCGTCCTATTACTACTCTGAAAATGAGGTTGGCACTGAACTACATCGTGGAGGAGAGTAGTCCGAAGGTGAAGGCTAGTCCTATGATTCATCAGTGGACTCCATCACCTAGTACAAGTGACGTTGAAAGAAAAGGTCCTTCGCTCTTCAATGTCTTCGTCATATGCACGAAGGATTTATCTTTACAGTTGCTGAGCGGGCTACGTAGAGCCAGACGTACTCTCCCGACAAAGCCAGGGTTTACCGTACTTCTTATCTAGTACCCTGATCGTACAACAACCTCATTCGTGTAAACGAAGCAGTAAGGCGCCAGACGTACTCTCCCGACAAAGCCAGGGTTTACCGTACTTCTTATCTAGTACCCTGATCGTACAACAACCTCATTCGTGTAAACGAAGCAGTAAGCGCGCCCCCGGGCTTCCGCCGCGGGGAGGAGTGTGCGGGTCGGGAGTTAGTGGGGAATTTACTATGCGCGATACACGGGTATGGTCAAGCGGGCTAAAGGTTAGCGCCTGCTTAGCTGCTGCTTTTCCCTGCGTGCCGGATTGACCTAACAGTGAAATCTTGCTCAGGCCGAGGCATTTATCTCGGTACCAATCAATGTTAAGCTGGATAGAAAATTGCCCCGGATGGGGTCTTGACAAAGTGGGACAATAACGATCGATTGCAGAACTGTTGACATTGCTCGCAAGCATCAATTGGGGCACCTACACTACATTTACCGAAAATGCTGCGTCGGCTTGGGCCAGACGTACTCTCCCGACAAAGCCAGGGTTTACCGTACTTCTTATCTAGTACCCTGATCGTACAACAACCTCATTCGTGTAAACGAAGCAGTAAGCGGTATCGGCTCCTAGTGGTCGGCTGCCGGTGTCATTGAAGCGCAGGACGGGTGATGGGATCAGCATGCACACAGAAGAATATGCCCAACCGCTCTATACATAACTGGTCTATACGGGCGGACTTTCTCCCCACCGATTAGACGA"

//  val s = "TTTCCATATACGGGACAAGGGTGAGCATTTCCGGGCTTGGATAGGGGCTGCAAGAAAATATCTGGACGTAAGAAG"
//  val t = new Trie()
//  in.tails.foreach(t.add(_))
//  val edges = t.travers()
//println( edges.find(p => p._1 == s))
println( longestRepeat(in) )

  def longestRepeat(in: String) : String = {
    def subStrings(s : List[Char], acc: List[String]): List[String] = s match {
      case _::tail =>
        val ts = tail.mkString("")
        subStrings(tail, ts +: acc)
      case Nil =>
        acc
    }

    //val tails = subStrings(in.toList, List(in))
    //println(tails)
    val fullSub = in
      .tails
      .map(s =>
        s
          .reverse
          .tails
          .map(_.reverse)
      ).flatten.toList
    val tails = in.tails.toList

    def countAcc(subStr: String, ts: List[String], count: Int ) : Int  = {
      ts match {
        case h::tl if h.startsWith(subStr) =>
          countAcc(subStr, tl, count + 1)
        case _::tl =>
          countAcc(subStr, tl, count)
        case Nil => count
      }
    }
    val res = for {
      subString <- fullSub
      count = countAcc(subString, tails, 0)
      if count > 1
    } yield (subString, count)
    //println(res)
    res.map(_._1).maxBy(_.length)
  }

}
