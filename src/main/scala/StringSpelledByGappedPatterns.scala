import SpectrumProblem.{massTable, peptideVariations}

import scala.collection.mutable.ListBuffer
import scala.io.Source

object StringSpelledByGappedPatterns extends Profiler {

  val integetMassPath: String = "/Users/pavel/Sources/dna-analysis/src/main/resources/data/integer_mass_table.txt"

  def massTable(): Map[String, String] =
    Source.fromFile(integetMassPath)
      .getLines()
      .toList
      .map(_.split(" "))
      .map(x => (if (x.length == 2) (x(0), x(1)) else (x(0), "")))
      .toMap[String, String].withDefaultValue("")

  def cyclicSpectrum(peptide: String): List[Int] = {
    val variations = {
      for {
        i <- 1 to peptide.length - 1
        comb = (peptide + peptide.take(i - 1)).sliding(i, 1)
      } yield comb
    }.flatten

    val table = massTable()

    0 +: (variations :+ peptide).map(item => item.map(c => table(c.toString).toInt).sum)
      .toList
      .sorted
  }

  def scoreExperimental(peptide: String, experimental: Array[Int], spectrFun: String => List[Int]): Int = {
    //val theoretical = cyclicSpectrum(peptide)
    val theoretical = spectrFun(peptide)

    val theoreticalBuff = theoretical.toBuffer

    experimental.foldLeft(0)((acc, mass) => if (theoreticalBuff.contains(mass)) {
      val index = theoreticalBuff.indexOf(mass)
      theoreticalBuff.remove(index)
      acc + 1
    } else acc)
  }

  def linerSpectrum(peptide: String): List[Int] = {

    val acidMass = massTable().map(p => (p._1, p._2.toInt))

    val alphabet = acidMass.keys.mkString("").sorted

    val prefixMass = Array.fill[Int](peptide.length + 1)(0)

    (1 to peptide.length).foreach(i => {
      alphabet.foreach(s => {
        if (peptide(i - 1).toString() == s.toString)
          prefixMass(i) = prefixMass(i - 1) + acidMass(s.toString)
      })
    })

    val liner = ListBuffer[Int](0)
    (0 to peptide.length - 1).foreach(i => {
      (i + 1 to peptide.length).foreach(j => {
        liner.append(prefixMass(j) - prefixMass(i))
      })
    })
    liner.toList.sorted
  }

  def main(args: Array[String]): Unit = {

    //val res = linerSpectrum("AVCCDNYVTRDSKIQDEQVHAATNVHHLCGMQAETGWDL")
    //println(res.mkString(" "))

    val peptide = "SSRFKMVNTIKRYGLCGEAQKPFPGWGRYMQMWINQCDQKL"
    val experimental = "0 57 57 57 57 71 71 87 97 99 99 101 101 101 103 103 113 113 113 113 128 128 128 128 128 128 128 129 131 131 131 131 147 147 154 156 156 156 156 160 163 163 170 184 186 186 186 198 199 199 200 200 213 214 214 216 218 220 229 230 231 231 241 243 243 243 244 248 256 257 257 259 259 259 273 273 275 284 284 289 294 299 299 300 301 302 303 312 313 315 317 319 319 327 328 329 330 333 340 345 357 358 359 360 370 370 374 376 376 376 385 387 390 390 397 397 399 402 402 406 412 412 414 415 420 422 428 430 430 430 431 436 445 450 456 456 457 459 471 473 473 477 487 488 489 493 498 501 504 505 507 513 513 515 515 518 521 525 530 530 533 543 543 544 553 553 557 558 558 562 562 570 575 576 578 586 588 590 590 592 601 601 601 604 614 616 619 622 628 629 629 634 635 643 644 645 649 649 649 658 658 661 669 671 672 689 691 693 693 693 699 700 703 704 705 709 714 716 716 717 729 729 729 732 733 739 748 750 750 756 757 760 760 761 766 772 773 778 780 786 790 800 801 801 804 806 818 821 821 827 827 830 832 844 847 847 849 852 858 858 860 860 861 863 863 864 878 879 879 885 887 888 889 895 901 903 907 915 915 919 923 928 929 940 948 949 950 952 952 961 963 964 964 972 974 975 977 977 978 988 991 992 994 1002 1006 1008 1009 1013 1016 1018 1020 1034 1044 1050 1051 1057 1061 1063 1063 1065 1074 1075 1075 1078 1079 1079 1091 1092 1093 1095 1101 1101 1105 1105 1106 1119 1122 1126 1128 1131 1131 1133 1136 1138 1144 1144 1148 1154 1158 1162 1162 1164 1188 1191 1192 1192 1195 1197 1204 1206 1206 1207 1220 1223 1223 1231 1236 1238 1251 1253 1257 1257 1261 1261 1263 1264 1272 1275 1282 1291 1291 1292 1292 1293 1293 1294 1295 1307 1308 1310 1314 1317 1318 1319 1322 1351 1351 1351 1353 1354 1362 1364 1367 1374 1374 1379 1385 1391 1394 1403 1405 1408 1417 1420 1420 1420 1421 1422 1422 1431 1438 1438 1439 1449 1450 1450 1451 1454 1476 1477 1479 1481 1482 1490 1493 1495 1507 1507 1511 1516 1519 1521 1530 1537 1538 1540 1550 1550 1551 1551 1552 1553 1564 1566 1567 1568 1580 1587 1594 1594 1604 1608 1608 1610 1610 1612 1618 1620 1621 1621 1623 1651 1651 1653 1664 1667 1668 1668 1669 1679 1679 1681 1681 1693 1693 1697 1707 1711 1719 1721 1722 1724 1724 1736 1738 1749 1749 1750 1750 1750 1751 1754 1765 1767 1768 1779 1781 1782 1794 1796 1810 1811 1822 1824 1835 1835 1837 1839 1850 1851 1852 1852 1853 1854 1864 1866 1867 1867 1877 1881 1885 1892 1894 1896 1906 1907 1909 1913 1921 1924 1940 1942 1952 1955 1963 1964 1965 1970 1978 1980 1980 1980 1982 1991 1996 1997 2007 2008 2009 2011 2020 2022 2024 2044 2051 2052 2053 2065 2069 2071 2078 2083 2083 2083 2094 2107 2108 2109 2119 2120 2125 2125 2135 2138 2139 2140 2142 2151 2156 2164 2166 2170 2172 2179 2180 2180 2200 2206 2211 2211 2221 2222 2232 2237 2239 2263 2266 2267 2269 2269 2270 2272 2279 2281 2282 2283 2301 2303 2308 2320 2326 2328 2337 2339 2340 2365 2367 2367 2368 2369 2379 2382 2384 2394 2398 2410 2411 2414 2419 2426 2428 2429 2439 2453 2459 2465 2468 2468 2480 2483 2489 2495 2495 2499 2510 2515 2515 2522 2525 2539 2542 2550 2560 2566 2571 2581 2582 2582 2596 2602 2608 2612 2612 2614 2623 2638 2643 2645 2646 2669 2669 2673 2673 2678 2684 2694 2695 2699 2713 2713 2736 2741 2742 2743 2746 2752 2758 2768 2774 2800 2801 2807 2812 2823 2825 2825 2829 2841 2841 2844 2855 2855 2859 2859 2869 2873 2880 2904 2912 2930 2936 2957 2960 2968 2972 2972 2972 2972 2981 2983 2986 2988 2993 3025 3032 3043 3043 3058 3059 3060 3068 3073 3096 3096 3100 3103 3119 3144 3144 3153 3158 3161 3171 3172 3188 3188 3199 3209 3231 3231 3243 3247 3266 3271 3272 3274 3275 3289 3289 3316 3342 3344 3362 3362 3371 3375 3378 3402 3402 3403 3417 3429 3445 3470 3472 3473 3474 3490 3493 3503 3530 3534 3558 3564 3573 3573 3585 3601 3601 3602 3621 3621 3659 3677 3686 3686 3701 3704 3720 3729 3748 3752 3758 3787 3799 3807 3832 3832 3833 3857 3876 3886 3900 3904 3920 3938 3960 3979 3985 3988 3991 3999 4032 4051 4098 4107 4116 4116 4119 4122 4135 4222 4229 4244 4250 4263 4263 4350 4353 4357 4391 4419 4481 4504 4506 4547 4634 4637 4660 4747 4765 4878".split(" ").map(_.toInt)
    val score = scoreExperimental(peptide, experimental, linerSpectrum)
    println(score)
  }

}