import SpectrumProblem.{massTable, peptideVariations}

import scala.io.Source

object StringSpelledByGappedPatterns extends Profiler {

  val integetMassPath: String = "/Users/pavel/Sources/dna-analysis/src/main/resources/data/integer_mass_table.txt"

  def massTable(): Map[String, String] =
    Source.fromFile(integetMassPath)
      .getLines()
      .toList
      .map(_.split(" "))
      .map(x => (if (x.length == 2) (x(0), x(1)) else (x(0), "")))
      .toMap[String, String].withDefaultValue("")

  def peptideVariations(peptide: String): Seq[String] = {
    for {
      i <- 1 to peptide.length - 1
      comb = (peptide + peptide.take(i - 1) ).sliding(i, 1)
    } yield comb
  }.flatten

  def scoreExperimental(peptide: String, experimental: Array[Int]): Int = {
    val variations = peptideVariations(peptide)
    val table = massTable()

    val theoretical = 0 +: (variations :+ peptide).map(item =>  item.map(c => table(c.toString).toInt).sum )
      .toList
      .sorted

    val theoreticalBuff = theoretical.toBuffer

    experimental.foldLeft(0)( (acc, mass) => if (theoreticalBuff.contains(mass) ) {
      val index = theoreticalBuff.indexOf(mass)
      theoreticalBuff.remove(index)
      acc + 1
    } else acc )
  }

  def main(args: Array[String]): Unit = {
    val peptide = "PIQFFVYATPKQPGHHELCSNSRQIQRHYLAQWEQDVCSQCDL"

    val experimental = "0 57 57 71 71 87 87 87 97 97 97 99 99 101 103 103 103 103 113 113 113 113 114 115 115 128 128 128 128 128 128 128 128 128 129 131 137 137 137 147 147 154 156 156 160 163 172 184 190 190 194 194 198 199 201 201 202 210 214 215 216 218 225 225 226 228 228 231 234 241 241 243 243 246 247 256 256 257 257 259 259 262 269 274 274 275 282 284 284 288 289 291 294 297 297 304 312 317 318 318 325 326 327 329 331 331 331 333 335 341 342 346 353 353 356 357 361 369 371 372 372 384 385 385 387 391 393 397 397 397 400 404 406 409 410 411 417 419 421 422 425 428 428 432 433 434 434 440 444 445 448 450 454 456 456 459 468 468 469 471 480 484 485 485 498 500 500 500 503 507 513 520 521 521 525 525 525 525 528 531 532 532 536 546 547 547 551 553 553 556 556 556 556 559 560 565 569 571 572 574 581 584 584 585 598 599 604 608 612 613 613 616 622 622 627 628 628 628 635 635 635 643 644 649 650 652 656 658 659 660 661 675 678 679 681 682 684 684 684 684 685 687 687 688 693 697 699 702 715 722 725 726 726 727 728 731 732 741 741 745 746 748 749 750 750 755 763 763 768 772 774 781 784 785 785 787 788 789 789 797 798 806 810 812 812 812 812 813 815 815 816 821 825 829 830 834 842 845 845 853 854 856 859 862 863 869 871 877 878 878 878 878 882 882 884 886 892 897 901 902 911 912 913 916 916 917 917 918 925 925 925 926 934 940 940 941 941 953 953 953 960 962 969 973 975 976 977 979 981 981 982 983 984 985 987 988 991 1005 1006 1007 1010 1013 1014 1015 1019 1020 1024 1025 1028 1031 1045 1049 1053 1053 1054 1068 1069 1069 1072 1072 1072 1076 1078 1078 1080 1081 1081 1081 1084 1084 1088 1088 1090 1091 1096 1097 1098 1101 1104 1109 1110 1116 1116 1119 1120 1127 1127 1129 1135 1140 1141 1143 1147 1148 1152 1165 1168 1169 1175 1178 1179 1181 1181 1182 1182 1184 1185 1196 1197 1197 1200 1208 1209 1209 1211 1211 1212 1214 1215 1217 1219 1219 1219 1225 1229 1230 1232 1235 1243 1247 1248 1250 1251 1253 1256 1263 1266 1266 1269 1279 1282 1283 1288 1294 1295 1296 1297 1297 1298 1299 1306 1309 1310 1310 1310 1312 1312 1313 1314 1317 1332 1334 1337 1337 1340 1342 1345 1345 1347 1348 1352 1362 1363 1366 1366 1369 1369 1371 1372 1376 1380 1384 1386 1398 1398 1401 1403 1409 1409 1410 1410 1411 1413 1415 1422 1424 1425 1425 1425 1437 1437 1438 1441 1442 1445 1445 1447 1447 1451 1458 1458 1466 1467 1472 1473 1473 1476 1476 1482 1494 1494 1497 1497 1499 1500 1500 1506 1509 1512 1512 1513 1514 1522 1524 1529 1529 1534 1537 1538 1538 1538 1538 1540 1543 1544 1548 1550 1553 1553 1553 1556 1560 1560 1561 1591 1594 1595 1597 1599 1600 1601 1601 1604 1604 1612 1614 1619 1623 1623 1625 1627 1630 1631 1632 1637 1640 1640 1641 1643 1646 1647 1650 1652 1657 1657 1659 1660 1663 1665 1666 1666 1666 1667 1673 1675 1681 1694 1694 1700 1701 1703 1704 1704 1709 1713 1714 1727 1728 1728 1729 1731 1732 1732 1733 1740 1746 1751 1751 1754 1755 1756 1762 1763 1768 1768 1768 1770 1770 1774 1775 1776 1785 1788 1794 1794 1795 1796 1797 1800 1803 1803 1806 1808 1813 1819 1819 1822 1822 1830 1831 1832 1832 1841 1842 1842 1846 1855 1857 1857 1860 1864 1865 1865 1869 1869 1873 1879 1882 1891 1893 1895 1896 1898 1901 1903 1905 1910 1910 1911 1914 1916 1922 1922 1925 1926 1929 1931 1932 1934 1935 1940 1945 1947 1947 1947 1950 1950 1956 1956 1958 1962 1970 1974 1978 1983 1985 1985 1992 1993 1997 1997 1997 1998 1998 2002 2004 2007 2009 2021 2023 2026 2029 2029 2032 2038 2042 2044 2047 2050 2051 2053 2057 2059 2059 2059 2060 2060 2063 2063 2065 2068 2073 2075 2080 2084 2085 2086 2093 2094 2094 2096 2097 2098 2100 2103 2103 2112 2115 2125 2125 2126 2132 2135 2137 2148 2150 2151 2152 2157 2157 2160 2160 2162 2166 2172 2172 2172 2173 2176 2179 2183 2185 2187 2188 2188 2196 2196 2196 2197 2199 2199 2199 2204 2210 2213 2219 2222 2222 2222 2226 2229 2230 2231 2231 2240 2249 2250 2251 2253 2256 2263 2266 2270 2274 2275 2279 2279 2282 2286 2287 2288 2288 2288 2294 2300 2300 2301 2301 2302 2309 2316 2316 2322 2323 2324 2325 2325 2327 2332 2333 2339 2344 2344 2350 2350 2350 2353 2359 2359 2359 2362 2363 2364 2376 2377 2378 2378 2382 2382 2389 2390 2390 2393 2397 2398 2401 2411 2414 2416 2422 2426 2428 2429 2429 2430 2430 2431 2431 2435 2435 2446 2447 2450 2453 2454 2457 2460 2461 2472 2472 2476 2476 2477 2477 2478 2478 2479 2481 2485 2491 2493 2496 2506 2509 2510 2514 2517 2517 2518 2525 2525 2529 2529 2530 2531 2543 2544 2545 2548 2548 2548 2554 2557 2557 2557 2563 2563 2568 2574 2575 2580 2582 2582 2583 2584 2585 2591 2591 2598 2605 2606 2606 2607 2607 2613 2619 2619 2619 2620 2621 2625 2628 2628 2632 2633 2637 2641 2644 2651 2654 2656 2657 2658 2667 2676 2676 2677 2678 2681 2685 2685 2685 2688 2694 2697 2703 2708 2708 2708 2710 2711 2711 2711 2719 2719 2720 2722 2724 2728 2731 2734 2735 2735 2735 2741 2745 2747 2747 2750 2750 2755 2756 2757 2759 2770 2772 2775 2781 2782 2782 2792 2795 2804 2804 2807 2809 2810 2811 2813 2813 2814 2821 2822 2823 2827 2832 2834 2839 2842 2844 2844 2847 2847 2848 2848 2848 2850 2854 2856 2857 2860 2863 2865 2869 2875 2878 2878 2881 2884 2886 2898 2900 2903 2905 2909 2909 2910 2910 2910 2914 2915 2922 2922 2924 2929 2933 2937 2945 2949 2951 2951 2957 2957 2960 2960 2960 2962 2967 2972 2973 2975 2976 2978 2981 2982 2985 2985 2991 2993 2996 2997 2997 3002 3004 3006 3009 3011 3012 3014 3016 3025 3028 3034 3038 3038 3042 3042 3043 3047 3050 3050 3052 3061 3065 3065 3066 3075 3075 3076 3077 3085 3085 3088 3088 3094 3099 3101 3104 3104 3107 3110 3111 3112 3113 3113 3119 3122 3131 3132 3133 3137 3137 3139 3139 3139 3144 3145 3151 3152 3153 3156 3156 3161 3167 3174 3175 3175 3176 3178 3179 3179 3180 3193 3194 3198 3203 3203 3204 3206 3207 3213 3213 3226 3232 3234 3240 3241 3241 3241 3242 3244 3247 3248 3250 3250 3255 3257 3260 3261 3264 3266 3267 3267 3270 3275 3276 3277 3280 3282 3284 3284 3288 3293 3295 3303 3303 3306 3306 3307 3308 3310 3312 3313 3316 3346 3347 3347 3351 3354 3354 3354 3357 3359 3363 3364 3367 3369 3369 3369 3369 3370 3373 3378 3378 3383 3385 3393 3394 3395 3395 3398 3401 3407 3407 3408 3410 3410 3413 3413 3425 3431 3431 3434 3434 3435 3440 3441 3449 3449 3456 3460 3460 3462 3462 3465 3466 3469 3470 3470 3482 3482 3482 3483 3485 3492 3494 3496 3497 3497 3498 3498 3504 3506 3509 3509 3521 3523 3527 3531 3535 3536 3538 3538 3541 3541 3544 3545 3555 3559 3560 3562 3562 3565 3567 3570 3570 3573 3575 3590 3593 3594 3595 3595 3597 3597 3597 3598 3601 3608 3609 3610 3610 3611 3612 3613 3619 3624 3625 3628 3638 3641 3641 3644 3651 3654 3656 3657 3659 3660 3664 3672 3675 3677 3678 3682 3688 3688 3688 3690 3692 3693 3695 3696 3696 3698 3698 3699 3707 3710 3710 3711 3722 3723 3725 3725 3726 3726 3728 3729 3732 3738 3739 3742 3755 3759 3760 3764 3766 3767 3772 3778 3780 3780 3787 3788 3791 3791 3797 3798 3803 3806 3809 3810 3811 3816 3817 3819 3819 3823 3823 3826 3826 3826 3827 3829 3829 3831 3835 3835 3835 3838 3838 3839 3853 3854 3854 3858 3862 3876 3879 3882 3883 3887 3888 3892 3893 3894 3897 3900 3901 3902 3916 3919 3920 3922 3923 3924 3925 3926 3926 3928 3930 3931 3932 3934 3938 3945 3947 3954 3954 3954 3966 3966 3967 3967 3973 3981 3982 3982 3982 3989 3990 3990 3991 3991 3994 3995 3996 4005 4006 4010 4015 4021 4023 4025 4025 4029 4029 4029 4029 4030 4036 4038 4044 4045 4048 4051 4053 4054 4062 4062 4065 4073 4077 4078 4082 4086 4091 4092 4092 4094 4095 4095 4095 4095 4097 4101 4109 4110 4118 4118 4119 4120 4122 4122 4123 4126 4133 4135 4139 4144 4144 4152 4157 4157 4158 4159 4161 4162 4166 4166 4175 4176 4179 4180 4181 4181 4182 4185 4192 4205 4208 4210 4214 4219 4220 4220 4222 4223 4223 4223 4223 4225 4226 4228 4229 4232 4246 4247 4248 4249 4251 4255 4257 4258 4263 4264 4272 4272 4272 4279 4279 4279 4280 4285 4285 4291 4294 4294 4295 4299 4303 4308 4309 4322 4323 4323 4326 4333 4335 4336 4338 4342 4347 4348 4351 4351 4351 4351 4354 4354 4356 4360 4360 4361 4371 4375 4375 4376 4379 4382 4382 4382 4382 4386 4386 4387 4394 4400 4404 4407 4407 4407 4409 4422 4422 4423 4427 4436 4438 4439 4439 4448 4451 4451 4453 4457 4459 4462 4463 4467 4473 4473 4474 4475 4479 4479 4482 4485 4486 4488 4490 4496 4497 4498 4501 4503 4507 4510 4510 4510 4514 4516 4520 4522 4522 4523 4535 4535 4536 4538 4546 4550 4551 4554 4554 4561 4565 4566 4572 4574 4576 4576 4576 4578 4580 4581 4582 4589 4589 4590 4595 4603 4610 4610 4613 4616 4618 4619 4623 4623 4625 4632 4633 4633 4638 4645 4648 4648 4650 4650 4651 4651 4660 4661 4664 4664 4666 4666 4673 4676 4679 4679 4681 4682 4682 4689 4691 4692 4693 4697 4705 4706 4706 4708 4709 4713 4713 4717 4717 4723 4735 4744 4747 4751 4751 4753 4760 4760 4770 4770 4770 4776 4778 4779 4779 4779 4779 4779 4779 4779 4779 4779 4792 4792 4793 4794 4794 4794 4794 4804 4804 4804 4804 4806 4808 4808 4810 4810 4810 4820 4820 4820 4836 4836 4850 4850 4907".split(" ").map(_.toInt)

    val score = scoreExperimental(peptide, experimental)

    println(score)
  }

}