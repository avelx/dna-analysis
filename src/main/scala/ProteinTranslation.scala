import com.binf.Fun.reverseComplement

import scala.io.Source

object ProteinTranslation {

  private val rnaCodonTablePath : String = "/Users/pavel/Sources/dna-analysis/src/main/resources/data/RNA_codon_table_1.txt"

  def rnaCodonTable() : Map[String, String] =
    Source.fromFile(rnaCodonTablePath)
      .getLines()
      .toList
      .map(_.split(" "))
      .map(x => ( if (x.length == 2) (x(0), x(1)) else ( x(0), "") ) )
      .toMap[String, String].withDefaultValue("")

  def proteinTranslation(RNA: String) : String = {
    val dictionary = rnaCodonTable()

    RNA
      .sliding(3, 3)
      .toList
      .map(x => dictionary(x.toString) )
      .mkString("")
  }

  def dnaTranscription(dna: String) : String = dna.map(c => c match {
    case 'T' => 'U'
    case c: Char => c
  })

  def rnaRetranscipt(rna: String) : String = rna.map(c => c match {
    case 'U' => 'T'
    case c: Char => c
  })

  def peptideEncoding(dna: RnaTranscription, dictionary : Map[String, String]) : Peptide = {
    val left =  dna.dnaTr.sliding(3, 3).map( dictionary(_) ).mkString("")
    //dictionary(dna.dnaTr.take(3)) + dictionary(dna.dnaTr.takeRight(3))
    val right =  dna.dnaTrReverCompl.sliding(3, 3).map( dictionary(_) ).mkString("")  //dictionary(dna.dnaTrReverCompl.take(3)) + dictionary(dna.dnaTrReverCompl.takeRight(3))
    Peptide(left, right)
  }

  case class RnaTranscription( dnaTr: String, dnaTrReverCompl : String)

  case class Peptide(code: String, reverCompl: String)

  def main(args: Array[String]) = {

    //val res = reverseComplement("GAAACT")

    val dna = "ACTAGCCTCGCCACGCGAACCTATCGGGTTATAACGGAAAGTCCATAGAGAAACCACCTCCGCAGGTAGGACCAGGACGTCCGTCAGGGTAAGTTCGACTGGCGGCATCTATACGACTAGAAATGAGGACCTTGTAGAAATCCCGCAAGTGTTTCAATTCCGCAGCGGAAAGGAATCATTTATACAACCAGAAATGAAGACTTGAGGTCTGACAGGAAATTTTCAAATGACGGGTAGCAAGTTGGCGCGCTAGAAGCTAGTTTTAACTCTTGGTGCCCTAAAAGATTCGAGGGCCAGGCGGTTTACTAGCAGGCATAGGTAACATCCAGGTCAGCAAACTGTGTTCTCTGGAACAGTGACCCAGACAGTCGCTTGTTCCCTCGACCCATCTCCTCTATCTTACAACATCCTAAGAACGGACTATTCACTTTTCTGGTAAAATTAGGGCGGAGTTAGACGGGCACGGTTCTCAAGAACAATCCGACGCATACAGGTTAACTTCCTACGCCCTACGTAATCACTGCAACCAAAGTTGCGGCCGGACACACCAATTAGGTAGCTGCCCCTACTTATTGAAAATATGCCAGGCCACCCCAGCTACTATCCTGGCGCACGGTCTTACGCGGCTCATGATCTTTCAACTAATTACATGATCCCATTCAAGAGAACTATAACAAAAAGGGAATCGCCCACGCCTAGTGCCATGGAACACGGATAACCAATTTCGGGTCTGCGTTTTAATACAGTGAATACGTGGCCGTACCCGGATCTACACAACCAGGAACGAAGACTTATCACGGTTGTGTTTGGGGGTGCGAAAAAGCCCATCAGGTGACTCAGGAACTGACGGTTTGGATATAAGGTACGAGGTGAGGACCAGATAGGTCAAATTCGTTTTTGTTGCAATACTGGCTCGAACAAAGCTTCAACTTATCTATACTACTAGAAATGAGGATTTATCCGTTCTCAACATGCTGTCATCTTAACTTATCATGCGCTTTTGTCGAAATGGGCCGCACACGTGCTCAGTATTTATAATCCGAATGGGCGGTGGGGACTCTGCCCATTCTAATTTTCGGAATGCGCATCTATAGCGAATCCTAGCATTAAAAACTATTAAAGGGATCTTTAAATCACGTTTTCATGATCCAGATTAGTCACTGCAGTCGCCGTGAGACAGGTATGAGTGCGAACGCGTATAGCAAGTCCTCGCATGCAGTGCATAGGTCTATTTTTCAGGTCCTCGCTGTGTATCTAGCCAATTATCTATAATATTGTAGGTCCAGTCTTTAAAGTTTACGGAGCTCTGTCGGTATCCGGAAATTGTCGCAACCTTTTTACGCGTCACGCATCCAGTGTCAAGCCCCGCTGGATATGCGTCGTGGGCTGCGGAACGGAGAGTACTTGTGATATGATTTTCCACAAGAAAGGGTCATACACCTCGATGCACTACAGCGCACAGGCATTACGCATCTGCTCCTTTCCCTCCGCTTCATCTCTAACAGGGCTGGGGAAGCACTAGATGCTTGAGTCTATATGGTTTAATTGCACGTCTTGCCCCTTACGAGGCGATAACAGGTTTTCTTATATGGTTTCCGTGACGTGTTTTAGCGATGCATACGGGCAGTGGGAAAAAACGGCGATACCTAACCCCGAATAGGACCGACGACGTATCCGCCGTTGCTGACGCGTCTGAAAGTAGGGTCACTTCACTGAGGAAGGGAGGTCTTAGGGAGTTAGTCTACAATTAACGGTTATCATTTTTGGCCGGGTTTATGGTTCATGCAACCCAAATCGTTCAGCCAAGCTACCTAAGATCCCAATGAATCTCACCAGGTCTTTGGTAGTCGGTCCGGGCTTAAGCATGCCGAAGCTCATCTAAGGATAGCGGACTGTGCTAGCCGAGTATCGACACTAGCGACTCACACCGTTTGTGGTCAAGGCCTCTTTGGAACAGAACCGGTCTTAGACTCTCTATAAGTAAGCTGCAGTAGCGCTGCCACGGAAGGACTGGATGGTGTATGATTTTAAATTAGTTTTTAAAGTGTTAAGAATACCTATTACACACTCTAGAAGGAATTGTCAGTACATCCGCCATCAAGTACTGTATTTATTCCACATGGGGCGATAGTAAAAGGAGTGTACCAGCCATCCGTTATCGTTCGTCACCGATGCCAGACGTATGGCCGAGACAATGTGTGTCCGAATTAAACTGAACCAAGCGAAATCTGTTCTGGCCGACCATAGTCCAGAACTTATAATTCGGCCTACCTTACCCAGTGTCACATTGGTGGTTCACGTCAGAGCCCGCGGTCCCCTGCAACTCTGTATACTGTTGCAAGCTTGCAAGCAAGGCACCCAACAGGGTTTCGGAAGTATCGTTGAGGTCTTCATTGCGTGTAGTATATATAAACGTAAAGTACATCACTATTCCAAATCCTCGTTTCTGGTAAATCTTCATTGCGCGTCGTATAGATTCGTTAGACTCTTAATTGGTTAGGACAGTCACGCTGCTACTAGGCTTGGTAACCTAATCATTCCCCGAGAGTTAAACAAAGGGGTAGTAAGGGCCCCAAATTGAAGGCAGCGTAAACTCGAAGACTAGGCAATTAGGTAGACCCAACGCTACGTATAGATTGATATGCCATCGACCTCGCGAAGCCATCAACCGGGTTTGATTTGCAAGTCTTGCTCCGTAATCTTAACGAGACGACCATGGTTGAAAGGTTAGAGGTGCTGTAACACAACGAGGCGGAATCCCTGGGTCTACGCTTAGGGTCGTCGGAGGAAAGCTATACTTGGGTTCCCCTGAGCCTTTCCCGTTAGACTCTCTTCGGATTAATACTCCGCGAGAAGAACTACGTGTCAGTTGTTCCAGTGGGATGCACGTATAAAAGGTCCTCGTTTCGCGTCGTATAAATAAATTGCCTGATCAGGGTACACATCGACCTCTCTTCCAGGCACAACCCGTAACACTCATCATGATCACCCTTATACCCGTAACGGCGCCCCCCTGTTGAAACTGCTATGTACGCGTAACACCCCTCAACTGTACCACCTACATAATCTATACTACGCGGAATGAAGACCTCACCCACTATTATCCTTGTATGCCTCTGGCCCACGGATTCCTGGCGCTAGAAAAAGCACAATCCCACCTATAACCCCTCTACATATTGACGCACGGGTTGTGTTACCCGTGGGTCAGTGGGAACAAGGTCATCTAGCTGACTCAATCAAGCTGAACATGTCGTCGTGAATCCACTCACGGGTGGGACCATATCTTGACTCACTGATCTCAATACGATCGCCCGCATCTACACAACCCGAAATGAAGATTTGGTTCGTGCTCCGACACTGCTGACGGGCCACGTGAGGCAGCATGCCAGTGCTTCGGTAACCTAAGCCCGAAGGACTTGCCTACCGGTGTGGAGCGAGTCTAGACAAATCTGTCGGGTGCTATAAGTATAGTTCTTTACGCGCTTTAGCTCATAGTTTGTTATCCTGGTGACTTCGTCAATTAGCACATGGTATACGTGTAGTTACCCGACAAGGGCTATTGTATCGTACTCTTCCTTGTAAACGTGCTTCCCACTAGTAACAAGGGGTGCTAATGTGGCGGTATAAAAGTTTATAATTTACCTAAGACCGGTGCGTCTCCGAACCTCTCATCAATCTTAACCGAAAGAGCCGGAGTGATACGAACCCCCTGCGGGTTAGTAGTTCATCTCGAGACGATAGGGAATCTATCCGTATTTGAAAATTGGATCAAGAGTTCGGTGGATGCACTATAATGCCTTGCGACGGGCGATAGTTGGACGTTTAGTTGGAGTACTTTAGGACGACATCATACCTGTAGACAATCCCTGGACGGCAAGTTCAGTAAGCTGTATGTACTATTTCTATTTCTGAAACGACAGAATTTTGATGGATAAACCACGTCCCGCCTCTCTATCAATCTACATGCTATCCATGCGTCCAAGGCTATTGATTGTACCCAATCCTAGGAGGCGCTTACTTTCTATCGCTTAAATTGTATAGTCATCAAAGATATCCGGGGGACCGGTAACGGTCGATTGTCCAAAGAAGTCCGCCAGATCATGATAATGGTAAGTGAACAAGCGTGGAGGGTTTGGGACGTCCATATACACGACCCGTAACGAAGACCTATGGTGTCATAGTAAGCTTCCTAGTTCGCGCGGATCAAGCGTAAGAAAATATGGCATGGTGAAAGATCAATCCTGGGTGTACAATATCGCAGGAAGGACGAGGCACGATTGCATGCAGCACCTAGGCTGCTAGTCCATACGCATGTCTGGGCCGACTACGACGCCATCATTAACCAATTCGTGGTACACTATATTTCAAGGTATTGTTCGAGAATGCGGATAACTATGGATAAGCCATTAAAACAAGCTATGCGATTCATGACGCCAACTCCCGGCCGCTCAGACAGTAGCAGGTAACCCTACTAGACTTGTTTTTCGCGTTATGGGGCGATTGCAGGAACCAAGGGAGTACTACAAATTTTATCATACCGACCGTCTGTAAATCGATGCTGACTAATCCTCGGATCGGACGGCTTGGCTTAATCAGTGCCCTTGCACGACTGAGGATTCCTGGAATTAATCGCACCCTGCCCATTCAAAGAATAGAATTAGAATCGGGACCCATCAATTAGCGCGAAAGGTCTTCATTTCTCGTGGTGTAAATCCAGTTAAATGAATGGCTAATCTATACAACACGCAATGAAGACCTTCACCGAAGTCTATACACCCGCACTCAGTGCTTTCCGCATCAGAGGTTGTCGCCCATCTCCCCAACTGATTACAGAGTGAAGGGGGGTTGCATTCCCTAGGGTTGCACGGTCTGTCAGTACACAAATGACTAAGAGAGCGCACATTACAGCGTGCAATCGTCTCCACTCCTTTGGATTGTAGGACGTCTCTAGTCACTCCCGCAGTCCTTATCGTTAGCCCCCCGATACAGTGACAATAGCGGACGGCGCACGTTATGCATAATAGTTCCTAAACGCAGTCAGTTGAGTTCCATCAATCGGATACCAGCCAATCTATACGACACGAAACGAGGACCTCGAACGCAGTGCAGCTTATCATGCAGTACCACAGTGGGTGTCTGTTCTGCTGTGATGGCGGCCGACGACAGTCATTTAACGTTACAGCGTAGAAGGGCTGAAGGGAGGTGAAAGCCACACCCCATGCTTGCCTAAAAGGGGAGAAGCGGGGCCCATGGATATATACGACTCGCAATGAAGACCTAGGGCGGCAGGGAATGACGTTCCTGCAATGGCCTATCAGTGGTCGGCGTTTGCCAGGCTGTACGTAATAGCAGAGAAGATTGCGCTAGGACCTATTGCTTGAGTAGACACATTTGAAGTCTAGAGTCGAAGTGATTCAAAGCGTATGGAATGACGAGCTAAAGATAGGAGGCAACACGACCATAGAATACTAAGAACAAATTTTAATTAGCAGGACGAGTTTGCATCTCTCATTGTCGCAGAAGACGTACAACTGGTAGGCCTACTATCACATCATCGTCGTTCTTAGTGATACCGCAATGAAAAGGCCTCGTAGAAAGAGATAGTAGTTGCCCTATAAAGGGCGAGACACACAGATGATTTGACAGTCGACAGCCCTGTAAAAACAAGTGTGACTGGCAGAGTATCACACAGTGCAGTGAAGGCATGAGCCAATGAATGCACGCTGATTTTTTCTTAAGAGGTTAAGCTGCCTAGGACCTAATCGGGGGGGGCTTGTACCTTCTCGTTGGCCCGGACGTTGGACACGGTTATCCGTATTGAAACATAATGAAGTAATTCGAGAAACGGACACAAGTAAACTGGACTCTGTTCGCGTCAGATTTTCTACCGTCAATTGTAGAAACACTTCGCCACCTTCTCATAATCTACTTTTCCGAAAACTCTCGCCGCACCAACGAATTAAATATCTCGGGGAGCGAAACTCCGCTACATAAAGAAGGAACGACCAGTTCATTTATCTCGCCCAAGTGAATCCCGTTCCGCAAAAACAGTATGTGGAGGACGCAATTATGGCAACTTCACGGACTCCAAACACCGGCTTGCTGTTTAGGTACATACAGCCGAAAAGCAAAGCCTCATCGGAAACCGATATGTACCGATTCGTCTCGGCGAGTCGAGAGGGTCGCATTCAATGACACATCGTGCCCATTTCCACATGGTGGGTCGTAGCCAGCCAATCTAGACGGTTAATAGACTGTGATCTCAAAGATGGTCGCCAAGCAGAACGGACCCACTGCGAGTTTGTCCGACGCGGATCCTCTTCAATGTTTTCGCTCAAGATTTGTTTAGCGATGCTATAGTATTACGCGAGTGCCACGGAGCCCAGTGTTGACGCGCAACTATACCAGAGGCACTCCCCCTTAATAACGGCGCTTCATCTAGACACAGATGTTGTTACACCGACGACGCCCGCTGTCTATGGTCCCCAAAGACAGCACAATAACTCGGCAGACCCCCTATAGCGTCCGAACAGACCTATTTAGAACAGCTCTGCCTAGTCACTGCTGAGAATTTATGAGCCAGGAGGAAAGCTTGCCTTATTCCGTGTGCCGGCAGTAAGGGACATTTCAGGCCGTTATCTAGAATTCTGTAATCCCCAATAATGAGTTGCTCGTGATCGCAACCTGATTTCCCACTCCACTAAGACCAGGAAGCCAGGGTCGTGTGAGCCCGAAAAACAGTTCCTCCCAGCCGCTCTCCCCCAGACAGTTCATCTACACCATAGCTCGTGACCACTTCCTTGTCGCATACGGACCACACGTCTACGATGCATACTATGTTTCTGCAAAAGATGACTGAACTTTTGCGCGAGCGGGAGTAGCTAGAGATTAACTTAACGTCCACCATGCAGGAGCCCGCCTACTTGCTTCACACGCCGGACTATTGCGCACGATAGACTGACATCTACACCACAAGAAACGAAGACTTGCGTTTTACAGACCGCCGTGGTCATTAGCAAGTCGGGCATCTATACAACTAGAAATGAGGATCTGACTACGCGGAATGAAGACCTATTGGACTCTCTAGGCGAAATTGGTCCGCCGCGACAAGTTGGCCACGTCTAAGCGTCCACGAGTGAAAACGTGATCCGGACCTTCGACTGACTGATTAATGAGTCCTTCTAGTCTCAATTCACGTCCAGAATCGACGTTCAGGACCCCGTTCAGCCCGTTATTTTCCAGGCAAGTAGATAGTCCTCGCAAGACAATGCCACCTGACGTGCATAGTTTCATAACGCGTCGTGCCTACACTAGTGTCGCAGTACGTTCGAGTCCTCAAGGGTTACTAATCAGTTACTATCAAAACTGTATCCGTGCGAGTTGAATAAGGCAAAAGCGGTCAAGTTTGGACCACTGTGCTATCACTCCGCCCATCGCCTAACCATTATCAAGAGAGTTATCCCCATGCCTACCCAACGATTCTGTGTAACTGTGATTTATACTACTAGAAATGAAGACCTCTTGTCAACGATATTTTTGAGCGCATGCTCCAGTATATGTTGGTATGAAAGAATTTGACTTACGCTGCTTGCACTATTATGTAATCCTAATACTCGAGGGCCACAAATTTCAGGCCAATTCTCACGGAAAACATCCGCTGGTCCGCCTGCCCTCGACCCCCAATAGGTTCACGGCTTTTGCAAACACTAGCAAAGGAGGACCGAGTTATAGACTGCCGTCGCCTGCCAACAGTGCATTGCCGTCGCTAACAGCCCGGGTGAGTATCTGTGGCGGGTTCAGCCACGAGCTAAAAGTATCAGTTACCGATACTCCTGTGCTTCCCCGGTGATCGTTCTCTTCTTGCCCATCCCTCAACAGATCGCACCCCCGGAAGTACTAGATGAATGGAGAGACAGGAAACCCGCAAGCACACTTTATAAGCGCATGTTTGTTCACGCAAACGCCCTCGCCACTTAGAGTCCTGAGTCTTACACTAATCAATGGAATGCATGTTACCTTGCGCACGAACCGGGCAGGTCTTCGTTGCGAGTCGTATAGATTACAGCCCCTATGTTCTTTGTTCATGGGAGACGCTCGCGGGGGGAGTAATACTCCTTAAGAGTCACGTCCCGCAAGCCCGGGAGTGTATTCTAATAAACACTTACGTCGTGGATTTGAGAGGGTACCATGGTCTTAGAATGCTAAGTCATAAGACACACCGGTACTTTCACATAAACAGCTTTAAGGTATGGACTAGCGAAAGTCCATGATGCGTTAACGATGTCGGGCCAGCTTTATCAGACTTGCTGGCCTCCA"
    val dictionary = rnaCodonTable()

    val peptide = "IYTTRNEDL"

    val res = dna.sliding(27, 1)
      .map(p => (p, reverseComplement(p)))
      .map(pr => RnaTranscription( dnaTranscription(pr._1), dnaTranscription(pr._2) ) )
       // .map(t => t.code + " " + t.reverCompl )
    .map(x => (x, peptideEncoding(x, dictionary) ) )
        .filter(res => (res._2.code == peptide || res._2.reverCompl == peptide) )
        .map(e => rnaRetranscipt(e._1.dnaTr) )

        //.map(xp => (dictionary(xp._1.take(3)) + dictionary(xp._1.takeRight(3)), dictionary(xp._2.take(3)) + dictionary(xp._2.takeRight(3)) )  )

//        .map(y => y._1 + y._2)
        //.filter(_ == "MA")
        //.filter(y => y._1.length == 2 && y._2.length == 2)

      //.toList.map(x => dictionary(x))
    val tr = res.toList
    println( tr.mkString("\n"))

  }

}
