import scala.collection.mutable
import scala.collection.mutable.ListBuffer
import scala.io.Source


object StringSpelledByGappedPatterns extends Profiler {

  val integetMassPath: String = "/Users/pavel/Sources/dna-analysis/src/main/resources/data/integer_mass_table.txt"
  val table = massTable()
  val acidMass = massTable().map(p => (p._1, p._2.toInt))
  val alphabet = table.keys.mkString("").sorted
  val aminoAcidMass = table.values.map(_.toInt).toSet.toList

  val massToAcid = massTable().map(p => (p._2.toInt, p._1)).withDefaultValue("")

  def massTable(): Map[String, String] =
    Source.fromFile(integetMassPath)
      .getLines()
      .toList
      .map(_.split(" "))
      .map(x => (if (x.length == 2) (x(0), x(1)) else (x(0), "")))
      .toMap[String, String].withDefaultValue("")

  def cyclicSpectrum(peptide: String): List[Int] = {
    val variations = {
      for {
        i <- 1 to peptide.length - 1
        comb = (peptide + peptide.take(i - 1)).sliding(i, 1)
      } yield comb
    }.flatten

    0 +: (variations :+ peptide).map(item => item.map(c => table(c.toString).toInt).sum)
      .toList
      .sorted
  }

  def scoreExperimental(peptide: String, experimental: Array[Int], spectrFun: String => List[Int]): Int = {
    //val theoretical = cyclicSpectrum(peptide)
    val theoretical = spectrFun(peptide)

    val theoreticalBuff = theoretical.toBuffer

    experimental.foldLeft(0)((acc, mass) => if (theoreticalBuff.contains(mass)) {
      val index = theoreticalBuff.indexOf(mass)
      theoreticalBuff.remove(index)
      acc + 1
    } else acc)
  }

  def scoreExperimentalInt(peptide: List[Int], experimental: Array[Int], spectrFun: List[Int] => List[Int]): Int = {
    val theoretical = spectrFun(peptide)

    val theoreticalBuff = theoretical.toBuffer

    experimental.foldLeft(0)((acc, mass) => if (theoreticalBuff.contains(mass)) {
      val index = theoreticalBuff.indexOf(mass)
      theoreticalBuff.remove(index)
      acc + 1
    } else acc)
  }

  def linerSpectrumInt(peptide: List[Int]): List[Int] = {
    val prefixMass = Array.fill[Int](peptide.length + 1)(0)

    (1 to peptide.length).foreach(i => {
      aminoAcidMass.foreach(s => {
        if (peptide(i - 1) == s)
          prefixMass(i) = prefixMass(i - 1) + s
      })
    })

    val liner = ListBuffer[Int](0)
    (0 to peptide.length - 1).foreach(i => {
      (i + 1 to peptide.length).foreach(j => {
        liner.append(prefixMass(j) - prefixMass(i))
      })
    })
    liner.toList.sorted
  }

  def linerSpectrum(peptide: String): List[Int] = {
    val prefixMass = Array.fill[Int](peptide.length + 1)(0)

    (1 to peptide.length).foreach(i => {
      alphabet.foreach(s => {
        if (peptide(i - 1).toString() == s.toString)
          prefixMass(i) = prefixMass(i - 1) + acidMass(s.toString)
      })
    })

    val liner = ListBuffer[Int](0)
    (0 to peptide.length - 1).foreach(i => {
      (i + 1 to peptide.length).foreach(j => {
        liner.append(prefixMass(j) - prefixMass(i))
      })
    })
    liner.toList.sorted
  }

  def linearScore(peptide: String, spectrum: Array[Int]): Int =
    scoreExperimental(peptide, spectrum, linerSpectrum)

  def linearScoreInt(peptide: List[Int], spectrum: Array[Int]): Int =
    scoreExperimentalInt(peptide, spectrum, linerSpectrumInt)

  def trim(leaderBoard: List[String], spectrum: Array[Int], n: Int): List[String] = {
    val linearScores = Array.fill[Int](leaderBoard.length)(0)
    (0 to leaderBoard.length - 1).foreach(j => {
      val peptide = leaderBoard(j)
      linearScores(j) = linearScore(peptide, spectrum)
    })

    val leaderBoardScored = leaderBoard.zip(linearScores).sortWith(_._2 > _._2)
    val leaderBoardSorted = leaderBoardScored.map(_._1).toBuffer

    val linearScoresSorted = linearScores.sortWith(_ > _)

    (n to leaderBoard.length - 1).foreach(j => {
      if (linearScoresSorted(j) < linearScoresSorted(n - 1)) {
        val a = leaderBoardSorted.zipWithIndex.partition(p => p._2 < j)
        return a._1.map(_._1).toList
      }
    })

    leaderBoardSorted.toList
  }

  def trimInt(leaderBoard: List[List[Int]], spectrum: Array[Int], n: Int): List[List[Int]] = {
    val linearScores = Array.fill[Int](leaderBoard.length)(0)
    (0 to leaderBoard.length - 1).foreach(j => {
      val peptide = leaderBoard(j)
      linearScores(j) = linearScoreInt(peptide, spectrum)
    })

    val leaderBoardScored = leaderBoard.zip(linearScores).sortWith(_._2 > _._2)
    val leaderBoardSorted = leaderBoardScored.map(_._1).toBuffer

    val linearScoresSorted = linearScores.sortWith(_ > _)

    (n to leaderBoard.length - 1).foreach(j => {
      if (linearScoresSorted(j) < linearScoresSorted(n - 1)) {
        val a = leaderBoardSorted.zipWithIndex.partition(p => p._2 < j)
        return a._1.map(_._1).toList
      }
    })

    leaderBoardSorted.toList
  }

  def leaderBoardCyclopeptideSeqencing(spectrum: Array[Int], n: Int): List[List[Int]] = {

    def mass(p: List[Int]): Int = p.sum

    def expand(peptide: List[List[Int]]): List[List[Int]] =
      peptide.map(p => aminoAcidMass.map(m => m +: p)).flatten

    val leaderBoard = ListBuffer[List[Int]](List() )
    val leaderPeptide = ListBuffer[List[Int]]()

    val parentMass = spectrum.max
    var score_leader = 0

    while (leaderBoard.nonEmpty) {
      val leaderBoardCopy = expand(leaderBoard.toList)
      leaderBoard.clear()
      leaderBoard.append(leaderBoardCopy:_ *)
      if (leaderPeptide.nonEmpty){
        val actualPeptide = leaderPeptide.head.map(v => massToAcid(v)).mkString("")
        score_leader = scoreExperimental(actualPeptide, spectrum, cyclicSpectrum)
      }
      leaderBoardCopy.foreach(peptide => {
        if ( mass(peptide) == parentMass){
          val actualPeptide = peptide.map(v => massToAcid(v)).mkString("")
          val peptideScore = scoreExperimental(actualPeptide, spectrum, cyclicSpectrum)
          if (peptideScore > score_leader)
          {
            leaderPeptide.clear()
            leaderPeptide.append(peptide)
            score_leader = peptideScore
          }  else if (peptideScore == score_leader)
            leaderPeptide.append(peptide)
        } else if (mass(peptide) > parentMass)
          leaderBoard.remove( leaderBoard.indexOf(peptide) )
      })

      if (leaderBoard.isEmpty)
        return     leaderPeptide.toList

      val updatedLeaderBoard = trimInt(leaderBoard.toList, spectrum, n)
      leaderBoard.clear()
      leaderBoard.append(updatedLeaderBoard: _*)

    }
    leaderPeptide.toList
  }

  def convolution(a: Array[Int]): Array[Int] = {
    val matrix = for{
      x <- a
      y <- a
      e = x - y
      if (e > 0)
    } yield e

    matrix.toArray
//    val res = matrix
//      .foldLeft( mutable.Map[Int, Int]() )( (acc, c) => if ( acc.contains(c) ) acc + (c -> (acc(c) + 1) ) else acc + (c -> 1)  )
//
//    res.toList
//      .sortWith(_._2 > _._2)
//      .map(_._1)
//      .toArray
  }

  def main(args: Array[String]): Unit = {

    //val experimental =
     // "0 87 99 99 113 113 128 128 129 129 131 200 212 218 227 227 228 241 244 257 258 328 331 331 340 341 343 355 356 357 386 427 430 444 459 468 470 472 484 485 485 543 555 558 559 572 584 597 598 601 613 671 671 672 684 686 688 697 712 726 729 770 799 800 801 813 815 816 825 825 828 898 899 912 915 928 929 929 938 944 956 1025 1027 1027 1028 1028 1043 1043 1057 1057 1069 1156"
     // .split(" ")
     // .map(_.toInt)
     // .sorted

//    val experimental =
//      "0 97 97 97 100 129 194 226 226 226 258 323 323 355 393 452"
//        .split(" ").map(_.toInt)
//
//    //val score = scoreExperimental("MAMA", experimental, cyclicSpectrum)
//    val score = scoreExperimental("PEEP", experimental, linerSpectrum)
//    println(score)


   //val experimental_ = Array(0, 137, 186, 323)
//
//    val spectrum = cyclicSpectrum("NQEL")
//
//    val spectrumModified = spectrum.sorted

    //println(spectrumModified)

    val experimental =
      "0 57 118 179 236 240 301"
      .split(" ")
      .map(_.toInt)
    val conv = convolution(experimental).sorted
    println( conv.mkString(" ") )

    //println(spectrum.mkString("-"))

    /*
    val spectrum =
      "0 97 99 113 114 115 128 128 147 147 163 186 227 241 242 244 244 256 260 261 262 283 291 309 330 333 340 347 385 388 389 390 390 405 435 447 485 487 503 504 518 544 552 575 577 584 599 608 631 632 650 651 653 672 690 691 717 738 745 770 779 804 818 819 827 835 837 875 892 892 917 932 932 933 934 965 982 989 1039 1060 1062 1078 1080 1081 1095 1136 1159 1175 1175 1194 1194 1208 1209 1223 1322"
      .split(" ").map(_.toInt)

    val n = 2000
    val res = leaderBoardCyclopeptideSeqencing(spectrum, n)

    val res2 = res.filter(peptide => peptide.forall(acid => acid >= 57 && acid <= 200))
    println( res2.length )

    println( res2.map(r => r.mkString("-") ).mkString(" ") )
    */


//    val str =  res
//       .map(p => p.map(i => massToAcid(i) ).mkString("") )

//    str.foreach( println )
//
//    val res2 = res.map(peptide => {
//      val actualPeptide = peptide.map(v => massToAcid(v)).mkString("")
//      val score = scoreExperimental(actualPeptide, spectrum, cyclicSpectrum)
//      (peptide, score)
//    }).filter(_._2 == 83)
//        .map(_._1)

//    println( res.length )
//    println( res.map(r => r.mkString("-") ).mkString(" ") )

//    println( res.map(peptide => {
//      val actualPeptide = peptide.map(v => massToAcid(v)).mkString("")
//      actualPeptide
//    }).mkString("\n"))

    //    val leaderBoard = //"LAST ALST TLLT TQAS"
    //      //"GFAQHVMEGIGLDVKFTNIISCFFDHEWSTCHCKHHNSINHTMSMVF LIGDDDEADNCMMMVQSIKWKTLLRYGAFFTFPFYSYAILHVFYVLW KPMWWAFIFGFCDMKNCFDAPFWMHNSVQWEQHYRCNDVKMMSQLCW MAPRDIRMYFDKYHETAALDSQWIIQQIYHLMNVRKLNRTNRFTSVG FEKYHQQQILIDAQRVRLVHTVARAGPGWVQTGGWQQTCPRYKPYAW NVNPCERSSPPNFSWFMSFWADNSDYGDVIFCCPSVLRTMEMQSKKG WDTDTFFQKAMLKKDETADQIFNLRPYSLTCHNENILGNDNQEKQAG TLGSGENDKGHTVGAGHKGHPEREFEAPIERHEHPRVMMTKVGCYWI VCGHHHEQTVIMKAFDAWKVGFLGPIVAWVIFPAVYLWGKSLCPWTN YDSPTTYLSTHCHRLTNRMVHENPVICPPQDFAKYLIQSGWEFPLVA KDPINQTGDTNVRNFNVGCFCGCYFQWERHDGTPMHFWFSQKLSLTW HMKKLFWGIMKHHILFDFVNQPAFTNKAKGPTPHKAEELIRNLGQEK FNDRQRLVCHTNQCCAYKNKVVCSGGGSEISTNAHTYHFLALGHQVG MYYSAWTEPYYPPTLQIWWWYWKYGCTACQTGPHTMVFVQPTCKCVH YYGYRQCSWCQRWTVRRMLCWIDVLHKALHWHVCLLFHQALYGFSHE WASIGAIMRSAKDMYESLEFHKTHCTYFVYMVCKEARPGWTFFIEWV"
    //    "IIFPRCGDYGGCEQWNYIMFSQAVTCFPPNDCRFMLISCEC FLNPKYCIRDWKMLWTGWALNNMTVLIYDYGLVIYVQIAML LSYDKEQNKVGQADTMPMWERVVFYGNNRSRDMDSNKQMLQ EPWNYLKGWEVMHTPPMHCMLKAQYQEQSVSEEHVQSFWFR AQVMCPCGDDSGGCIFLSEWIRHYFMKAGLESWAHGAAAQI HFHNFHMWRTQKLVCCKDMDLQNITYMDCWSFGGVFWFTFC VSETEENTFKMKLSMPRQYETMNEHQMHLIRASEWVPTGDR RFMIMRPPTESLKEWPKTQQENQMGECNLSNKMFDMHKPPG KFLSDTMIAQYVGGIWDRHYHCRREYYLWMDMMKPITPFTY MWKAKMPDFRYEHFWFQSWTYWNPAWICRDWTWQSGMQGKC NMRSRKETYMLAMFRFKCFTFVSAIGSGRMYYDANRRQIFQ AVQQMVGYKEDRWLVGTDFDAYRNWKTFVGWDICEREVEIS NDCMTKPKTIMACISIHNSSFGIEGSADLCSPNLHHDIAHI KVQPLTPPVQEVWRQHKEIPNEHPGLDFYGNGGHNAHVLRI VVAECTSEKLQVGSMDKLDDTCNKHIYPYRRMYVELALSIG DRLIHQHGDEGETVQICQAGNCVCRDPLKSVWNYCCLFWTY"
    //      .split(" ")
    //      .toList
    //
    //    val spectrum =
    //      //"0 71 87 97 97 99 101 101 101 101 101 103 103 113 113 113 113 113 113 113 113 114 114 115 115 128 128 129 129 129 129 129 129 131 131 131 137 137 147 147 156 156 156 163 163 163 186 186 198 200 200 202 202 204 214 214 216 216 216 226 228 230 234 242 242 242 242 242 242 244 245 253 257 257 257 259 260 266 266 268 269 271 276 276 276 276 278 283 284 285 287 293 294 299 301 303 313 317 317 317 327 329 331 343 343 347 354 355 355 356 359 363 363 370 370 371 371 372 379 382 384 388 389 397 397 400 405 407 408 408 413 413 415 415 416 418 418 420 422 428 430 430 432 434 439 444 455 456 458 459 473 476 484 484 485 485 487 499 500 501 506 507 510 510 511 513 515 518 522 526 527 528 529 529 531 533 533 537 540 541 544 544 545 547 558 559 562 568 569 571 572 574 585 586 588 597 598 607 610 612 616 619 620 624 624 625 626 631 636 641 644 646 650 657 657 660 662 663 669 669 670 671 672 674 675 678 681 684 685 689 691 692 696 698 699 700 700 701 711 733 733 735 738 738 739 741 753 771 772 772 773 775 775 775 778 779 782 783 783 786 788 789 794 794 797 798 798 800 801 802 804 805 806 808 810 813 815 828 837 840 846 854 862 864 864 866 869 882 884 885 886 888 889 899 901 902 902 903 904 907 908 911 911 914 914 924 925 926 928 935 935 937 937 941 941 945 952 955 961 961 975 975 977 984 987 988 992 995 999 1002 1013 1015 1016 1017 1017 1017 1022 1025 1032 1032 1038 1039 1039 1040 1044 1051 1055 1058 1058 1059 1062 1065 1066 1070 1070 1072 1074 1084 1088 1097 1099 1100 1101 1103 1104 1105 1106 1118 1118 1121 1130 1133 1135 1142 1150 1151 1153 1153 1154 1154 1156 1165 1171 1172 1186 1187 1194 1196 1198 1200 1201 1201 1202 1207 1212 1213 1214 1215 1216 1217 1217 1218 1218 1219 1231 1233 1234 1234 1236 1248 1255 1259 1264 1267 1272 1279 1281 1285 1298 1300 1301 1309 1311 1315 1315 1315 1316 1318 1319 1319 1321 1325 1330 1331 1334 1335 1338 1341 1343 1344 1346 1347 1348 1352 1363 1363 1372 1379 1395 1396 1398 1402 1410 1414 1414 1422 1422 1428 1429 1429 1430 1431 1432 1433 1434 1435 1435 1438 1447 1448 1450 1452 1460 1461 1471 1472 1472 1476 1476 1478 1481 1494 1499 1509 1515 1517 1521 1525 1532 1534 1535 1535 1535 1543 1546 1548 1551 1557 1557 1561 1561 1561 1562 1566 1566 1573 1577 1581 1585 1585 1589 1603 1605 1606 1608 1609 1609 1612 1618 1628 1634 1635 1636 1638 1647 1663 1664 1664 1664 1672 1672 1674 1674 1677 1680 1682 1686 1690 1694 1699 1702 1708 1713 1715 1716 1718 1718 1722 1723 1724 1740 1741 1743 1748 1749 1756 1763 1777 1777 1778 1781 1785 1792 1801 1803 1803 1805 1810 1811 1811 1815 1819 1819 1822 1823 1827 1830 1837 1837 1842 1844 1849 1850 1853 1869 1872 1876 1878 1878 1879 1887 1905 1906 1906 1912 1916 1916 1916 1924 1925 1929 1934 1936 1939 1940 1940 1940 1948 1948 1950 1965 1972 1979 1979 1991 1993 1996 2000 2000 2005 2007 2007 2009 2017 2019 2019 2026 2031 2034 2035 2039 2042 2053 2053 2058 2061 2064 2076 2079 2079 2087 2087 2094 2096 2097 2103 2113 2118 2120 2120 2123 2125 2132 2132 2135 2135 2136 2138 2140 2147 2150 2167 2171 2171 2192 2193 2200 2200 2200 2205 2209 2216 2216 2219 2224 2226 2226 2232 2233 2233 2233 2235 2237 2250 2252 2262 2266 2266 2268 2276 2284 2287 2296 2300 2303 2313 2318 2334 2334 2334 2336 2336 2337 2339 2347 2349 2355 2355 2356 2363 2363 2365 2366 2379 2380 2389 2397 2397 2413 2413 2416 2418 2434 2435 2437 2446 2447 2449 2449 2452 2466 2468 2468 2473 2476 2490 2492 2493 2494 2494 2494 2502 2510 2511 2519 2526 2533 2536 2542 2547 2549 2550 2553 2560 2578 2579 2579 2586 2597 2605 2605 2615 2620 2622 2623 2624 2624 2625 2627 2631 2632 2634 2648 2650 2650 2650 2651 2655 2689 2691 2706 2710 2711 2715 2733 2733 2733 2735 2738 2742 2742 2744 2747 2751 2753 2756 2761 2763 2768 2771 2779 2802 2807 2813 2820 2824 2825 2828 2836 2836 2836 2843 2846 2862 2862 2866 2871 2873 2876 2876 2881 2882 2900 2903 2907 2924 2933 2933 2937 2938 2944 2944 2949 2953 2957 2965 2972 2975 2975 2975 2987 2995 2999 3004 3018 3034 3034 3037 3037 3038 3039 3058 3062 3066 3066 3070 3073 3078 3078 3082 3088 3101 3104 3112 3119 3130 3135 3138 3149 3151 3152 3163 3163 3171 3172 3179 3190 3191 3193 3195 3217 3217 3220 3229 3238 3241 3241 3243 3244 3248 3250 3251 3276 3286 3291 3292 3300 3308 3318 3320 3321 3330 3335 3342 3351 3351 3354 3354 3357 3358 3358 3372 3387 3405 3407 3420 3422 3429 3431 3433 3433 3434 3439 3448 3455 3471 3483 3485 3486 3486 3488 3510 3514 3521 3533 3534 3534 3535 3546 3551 3552 3568 3585 3596 3599 3599 3600 3611 3611 3614 3615 3622 3634 3635 3647 3649 3664 3664 3681 3682 3696 3697 3708 3713 3727 3728 3728 3728 3735 3748 3750 3751 3771 3777 3797 3809 3812 3827 3828 3837 3841 3841 3842 3851 3857 3864 3864 3868 3868 3884 3898 3913 3940 3940 3942 3943 3955 3965 3969 3970 3970 3977 3981 4013 4014 4027 4027 4044 4053 4054 4056 4057 4083 4096 4098 4099 4110 4126 4140 4140 4140 4145 4155 4158 4167 4171 4184 4209 4211 4212 4223 4253 4255 4259 4268 4272 4284 4296 4296 4299 4303 4313 4352 4368 4373 4374 4397 4397 4397 4400 4409 4409 4416 4428 4465 4469 4487 4501 4510 4510 4526 4529 4538 4560 4566 4572 4584 4630 4639 4639 4639 4643 4651 4673 4673 4681 4685 4752 4752 4752 4768 4782 4786 4786 4802 4829 4853 4867 4881 4881 4883 4915 4915 4942 4968 4968 4982 4994 5028 5044 5069 5069 5071 5095 5097 5157 5157 5170 5184 5198 5210 5258 5270 5299 5311 5313 5371 5373 5412 5426 5474 5486 5527 5575 5587 5642 5688 5743 5844"
    //     //"0 71 87 101 113 158 184 188 259 271 372"
    //    "0 57 57 71 87 87 97 97 99 99 99 99 99 99 103 113 113 113 113 114 114 115 115 128 128 128 128 128 129 129 131 131 137 137 147 147 147 147 154 156 160 163 170 185 186 186 188 200 202 202 210 210 210 213 213 218 228 230 230 234 236 236 241 241 242 243 243 256 259 260 260 260 261 262 265 267 271 276 284 285 285 285 287 288 292 297 298 314 316 317 323 333 338 338 341 342 347 349 356 356 357 358 358 359 359 360 361 364 373 373 374 378 383 384 387 391 395 395 397 398 401 407 410 413 418 420 432 439 442 445 446 448 451 452 453 456 458 463 470 471 473 473 475 477 490 496 497 498 500 501 501 503 503 505 510 515 519 520 520 521 526 535 538 538 541 544 547 555 558 566 568 572 574 576 576 577 583 585 588 589 590 592 597 601 609 609 614 614 620 625 628 632 633 633 634 643 644 646 648 648 650 654 655 658 675 681 682 686 687 691 694 700 703 704 705 705 705 708 711 711 716 723 724 737 743 756 757 757 757 760 761 761 761 761 768 768 774 778 779 780 780 785 785 790 795 795 802 809 813 815 824 831 831 833 852 852 856 856 857 858 858 860 861 866 874 874 877 884 885 888 891 894 894 894 896 899 908 908 911 915 915 916 917 923 930 942 942 946 946 948 959 970 971 971 971 980 981 984 985 988 990 993 998 1003 1008 1015 1016 1021 1021 1022 1022 1028 1029 1033 1041 1041 1043 1045 1045 1045 1046 1051 1058 1061 1067 1080 1084 1087 1095 1096 1098 1098 1100 1101 1118 1118 1121 1128 1129 1132 1135 1137 1144 1144 1144 1144 1145 1150 1153 1155 1158 1158 1159 1171 1175 1180 1182 1200 1208 1208 1213 1214 1224 1224 1226 1227 1229 1231 1232 1234 1243 1243 1255 1257 1258 1258 1258 1269 1271 1276 1279 1281 1281 1283 1300 1305 1306 1312 1314 1318 1327 1328 1329 1331 1336 1337 1337 1341 1345 1354 1355 1357 1357 1366 1386 1387 1389 1394 1394 1398 1399 1399 1405 1405 1409 1411 1416 1416 1418 1429 1432 1434 1434 1442 1442 1443 1444 1465 1465 1471 1474 1483 1485 1486 1491 1491 1500 1501 1504 1518 1522 1522 1529 1531 1536 1536 1542 1542 1546 1547 1547 1548 1557 1563 1564 1570 1585 1588 1589 1597 1599 1599 1600 1602 1604 1617 1618 1619 1619 1634 1635 1635 1641 1665 1672 1673 1675 1676 1676 1676 1679 1683 1685 1687 1691 1696 1701 1703 1710 1713 1714 1731 1732 1732 1732 1746 1749 1764 1772 1772 1778 1782 1785 1789 1790 1790 1800 1802 1802 1807 1809 1812 1819 1823 1829 1838 1841 1845 1847 1848 1859 1861 1862 1878 1882 1886 1889 1901 1901 1905 1906 1909 1911 1913 1919 1919 1920 1928 1932 1937 1937 1942 1961 1962 1974 1975 1975 1992 1995 1999 2000 2006 2009 2010 2015 2017 2019 2029 2032 2036 2037 2038 2041 2048 2049 2066 2074 2074 2086 2088 2090 2108 2114 2116 2121 2123 2123 2123 2130 2137 2138 2139 2143 2150 2166 2173 2177 2179 2179 2185 2195 2196 2203 2211 2217 2222 2222 2229 2242 2242 2247 2251 2251 2251 2258 2260 2265 2279 2290 2293 2300 2308 2310 2316 2321 2324 2325 2326 2357 2357 2358 2359 2360 2373 2376 2378 2379 2379 2379 2382 2387 2388 2392 2424 2437 2440 2444 2447 2455 2457 2471 2472 2475 2481 2487 2488 2489 2492 2494 2495 2496 2507 2510 2516 2534 2539 2552 2569 2570 2575 2576 2587 2588 2589 2591 2603 2609 2615 2618 2620 2622 2623 2624 2642 2643 2668 2674 2675 2680 2699 2702 2717 2717 2718 2720 2722 2722 2732 2732 2735 2752 2756 2771 2771 2777 2789 2793 2805 2819 2821 2827 2828 2830 2831 2831 2831 2832 2847 2876 2884 2890 2899 2903 2908 2917 2930 2934 2934 2940 2945 2945 2946 2947 2952 2956 2991 3007 3007 3012 3017 3031 3032 3033 3033 3037 3060 3069 3073 3078 3081 3090 3094 3106 3116 3119 3138 3145 3147 3159 3166 3177 3180 3188 3188 3218 3219 3223 3225 3232 3237 3244 3267 3273 3275 3276 3294 3303 3308 3324 3329 3331 3347 3354 3366 3366 3372 3386 3390 3404 3404 3422 3428 3437 3453 3455 3465 3475 3480 3485 3517 3517 3532 3532 3536 3537 3579 3584 3584 3608 3614 3616 3616 3645 3650 3660 3671 3683 3707 3713 3715 3723 3742 3747 3773 3778 3797 3799 3802 3812 3822 3846 3870 3876 3893 3901 3925 3926 3927 3930 3975 3975 4029 4032 4040 4054 4058 4074 4089 4157 4160 4161 4169 4188 4217 4260 4288 4289 4316 4332 4374 4388 4417 4431 4502 4502 4516 4617 4630 4630 4745 4758 4873"
    //      .split(" ")
    //      .map(_.toInt)
    //    val n = 5
    //    val result = trim(leaderBoard, spectrum, n)
    //
    //    println(result.mkString(" "))
    //    println(result.length)
    //val res = linerSpectrum("AVCCDNYVTRDSKIQDEQVHAATNVHHLCGMQAETGWDL")
    //println(res.mkString(" "))
    //val peptide = "SSRFKMVNTIKRYGLCGEAQKPFPGWGRYMQMWINQCDQKL"
    //val experimental = "0 57 57 57 57 71 71 87 97 99 99 101 101 101 103 103 113 113 113 113 128 128 128 128 128 128 128 129 131 131 131 131 147 147 154 156 156 156 156 160 163 163 170 184 186 186 186 198 199 199 200 200 213 214 214 216 218 220 229 230 231 231 241 243 243 243 244 248 256 257 257 259 259 259 273 273 275 284 284 289 294 299 299 300 301 302 303 312 313 315 317 319 319 327 328 329 330 333 340 345 357 358 359 360 370 370 374 376 376 376 385 387 390 390 397 397 399 402 402 406 412 412 414 415 420 422 428 430 430 430 431 436 445 450 456 456 457 459 471 473 473 477 487 488 489 493 498 501 504 505 507 513 513 515 515 518 521 525 530 530 533 543 543 544 553 553 557 558 558 562 562 570 575 576 578 586 588 590 590 592 601 601 601 604 614 616 619 622 628 629 629 634 635 643 644 645 649 649 649 658 658 661 669 671 672 689 691 693 693 693 699 700 703 704 705 709 714 716 716 717 729 729 729 732 733 739 748 750 750 756 757 760 760 761 766 772 773 778 780 786 790 800 801 801 804 806 818 821 821 827 827 830 832 844 847 847 849 852 858 858 860 860 861 863 863 864 878 879 879 885 887 888 889 895 901 903 907 915 915 919 923 928 929 940 948 949 950 952 952 961 963 964 964 972 974 975 977 977 978 988 991 992 994 1002 1006 1008 1009 1013 1016 1018 1020 1034 1044 1050 1051 1057 1061 1063 1063 1065 1074 1075 1075 1078 1079 1079 1091 1092 1093 1095 1101 1101 1105 1105 1106 1119 1122 1126 1128 1131 1131 1133 1136 1138 1144 1144 1148 1154 1158 1162 1162 1164 1188 1191 1192 1192 1195 1197 1204 1206 1206 1207 1220 1223 1223 1231 1236 1238 1251 1253 1257 1257 1261 1261 1263 1264 1272 1275 1282 1291 1291 1292 1292 1293 1293 1294 1295 1307 1308 1310 1314 1317 1318 1319 1322 1351 1351 1351 1353 1354 1362 1364 1367 1374 1374 1379 1385 1391 1394 1403 1405 1408 1417 1420 1420 1420 1421 1422 1422 1431 1438 1438 1439 1449 1450 1450 1451 1454 1476 1477 1479 1481 1482 1490 1493 1495 1507 1507 1511 1516 1519 1521 1530 1537 1538 1540 1550 1550 1551 1551 1552 1553 1564 1566 1567 1568 1580 1587 1594 1594 1604 1608 1608 1610 1610 1612 1618 1620 1621 1621 1623 1651 1651 1653 1664 1667 1668 1668 1669 1679 1679 1681 1681 1693 1693 1697 1707 1711 1719 1721 1722 1724 1724 1736 1738 1749 1749 1750 1750 1750 1751 1754 1765 1767 1768 1779 1781 1782 1794 1796 1810 1811 1822 1824 1835 1835 1837 1839 1850 1851 1852 1852 1853 1854 1864 1866 1867 1867 1877 1881 1885 1892 1894 1896 1906 1907 1909 1913 1921 1924 1940 1942 1952 1955 1963 1964 1965 1970 1978 1980 1980 1980 1982 1991 1996 1997 2007 2008 2009 2011 2020 2022 2024 2044 2051 2052 2053 2065 2069 2071 2078 2083 2083 2083 2094 2107 2108 2109 2119 2120 2125 2125 2135 2138 2139 2140 2142 2151 2156 2164 2166 2170 2172 2179 2180 2180 2200 2206 2211 2211 2221 2222 2232 2237 2239 2263 2266 2267 2269 2269 2270 2272 2279 2281 2282 2283 2301 2303 2308 2320 2326 2328 2337 2339 2340 2365 2367 2367 2368 2369 2379 2382 2384 2394 2398 2410 2411 2414 2419 2426 2428 2429 2439 2453 2459 2465 2468 2468 2480 2483 2489 2495 2495 2499 2510 2515 2515 2522 2525 2539 2542 2550 2560 2566 2571 2581 2582 2582 2596 2602 2608 2612 2612 2614 2623 2638 2643 2645 2646 2669 2669 2673 2673 2678 2684 2694 2695 2699 2713 2713 2736 2741 2742 2743 2746 2752 2758 2768 2774 2800 2801 2807 2812 2823 2825 2825 2829 2841 2841 2844 2855 2855 2859 2859 2869 2873 2880 2904 2912 2930 2936 2957 2960 2968 2972 2972 2972 2972 2981 2983 2986 2988 2993 3025 3032 3043 3043 3058 3059 3060 3068 3073 3096 3096 3100 3103 3119 3144 3144 3153 3158 3161 3171 3172 3188 3188 3199 3209 3231 3231 3243 3247 3266 3271 3272 3274 3275 3289 3289 3316 3342 3344 3362 3362 3371 3375 3378 3402 3402 3403 3417 3429 3445 3470 3472 3473 3474 3490 3493 3503 3530 3534 3558 3564 3573 3573 3585 3601 3601 3602 3621 3621 3659 3677 3686 3686 3701 3704 3720 3729 3748 3752 3758 3787 3799 3807 3832 3832 3833 3857 3876 3886 3900 3904 3920 3938 3960 3979 3985 3988 3991 3999 4032 4051 4098 4107 4116 4116 4119 4122 4135 4222 4229 4244 4250 4263 4263 4350 4353 4357 4391 4419 4481 4504 4506 4547 4634 4637 4660 4747 4765 4878".split(" ").map(_.toInt)
    //val score = scoreExperimental(peptide, experimental, linerSpectrum)
    //println(score)
  }

}